{
	"info": {
		"_postman_id": "8ee375cd-6ce5-4a45-9337-9239c95ba5ea",
		"name": "Sales_V2_Routes_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23242050"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Delete_User_01",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/automation/deleteUser?email={{register_Email_01}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"automation",
								"deleteUser"
							],
							"query": [
								{
									"key": "email",
									"value": "{{register_Email_01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete_User_02",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/automation/deleteUser?email={{register_Email_02}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"automation",
								"deleteUser"
							],
							"query": [
								{
									"key": "email",
									"value": "{{register_Email_02}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Register_User_01_Happy_Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"firstname\":\"{{register_First_Name_01}}\",\r\n\"lastname\":\"{{register_Last_Name_01}}\",\r\n\"email\":\"{{register_Email_01}}\",\r\n\"password\":\"{{register_Password_01}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register_User_02_Happy_Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"firstname\":\"{{register_First_Name_02}}\",\r\n\"lastname\":\"{{register_Last_Name_02}}\",\r\n\"email\":\"{{register_Email_02}}\",\r\n\"password\":\"{{register_Password_02}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register_User_03_Registered_User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"User already exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"firstname\":\"{{register_First_Name_01}}\",\r\n\"lastname\":\"{{register_Last_Name_01}}\",\r\n\"email\":\"{{register_Email_01}}\",\r\n\"password\":\"{{register_Password_01}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register_User_04_Empty_Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"First Name is required\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"firstname\":\"\",\r\n\"lastname\":\"\",\r\n\"email\":\"\",\r\n\"password\":\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register_User_05_Invalid_Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Email\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"firstname\":\"{{register_First_Name_01}}\",\r\n\"lastname\":\"{{register_Last_Name_01}}\",\r\n\"email\":\"{{register_First_Name_01}}\",\r\n\"password\":\"{{register_Password_01}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register_User_06_Incorrect_Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Password must contain atleast one digit and one letter\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"firstname\":\"{{register_First_Name_01}}\",\r\n\"lastname\":\"{{register_Last_Name_01}}\",\r\n\"email\":\"{{Email}}\",\r\n\"password\":\"{{register_First_Name_01}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login_User_01_Happy_Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var fname = pm.globals.get(\"register_First_Name_01\");\r",
									"pm.test(\"Get user details\", function () {\r",
									"    pm.expect(jsonData.user.firstname).to.include(fname);\r",
									"});\r",
									"\r",
									"var lName = pm.globals.get(\"register_Last_Name_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData.user.lastname).to.include(lName);\r",
									"});\r",
									"\r",
									"var email1 = pm.globals.get(\"register_Email_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData.user.email).to.include(email1);\r",
									"});\r",
									"pm.globals.set(\"global_Token_01\", jsonData.accessToken);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.globals.set(\"user_Id_01\", jsonData.user.id);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{register_Email_01}}\",\r\n    \"password\":\"{{register_Password_01}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_User_02_Happy_Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var fname = pm.globals.get(\"register_First_Name_02\");\r",
									"pm.test(\"Get user details\", function () {\r",
									"    pm.expect(jsonData.user.firstname).to.include(fname);\r",
									"});\r",
									"\r",
									"var lName = pm.globals.get(\"register_Last_Name_02\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData.user.lastname).to.include(lName);\r",
									"});\r",
									"\r",
									"var email1 = pm.globals.get(\"register_Email_02\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData.user.email).to.include(email1);\r",
									"});\r",
									"\r",
									"pm.globals.set(\"global_Token_02\", jsonData.accessToken);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.globals.set(\"user_Id_02\", jsonData.user.id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{register_Email_02}}\",\r\n    \"password\":\"{{register_Password_02}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_User_03_Unregistered_Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"No user with the email found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"Email\",\r\n    \"password\":\"{{register_Password_01}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_User_04_Invalid_Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Credentials\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{register_Email_01}}\",\r\n    \"password\":\"{{register_Email_01}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_User_05_Empty_Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please enter a valid email and password\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"\",\r\n    \"password\":\"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reset_Password",
			"item": [
				{
					"name": "Reset_Password_01_Happy_Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please check your email and click on the provided link to reset the password\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\" : \"{{register_Email_01}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/resetpassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"resetpassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset_Password_02_Invalid_Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"No user exists with that email\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\" : \"{{contact_First_Name_01}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/resetpassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"resetpassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset_Password_03_Empty_Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please provide an email\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\" : \"\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/resetpassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"resetpassword"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Change_Password",
			"item": [
				{
					"name": "Change_Password_01_Happy_Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Password Updated Successfully. Please login\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{register_Email_01}}\",\"oldpassword\":\"{{register_Password_01}}\",\"newpassword\":\"{{new_Password_01}}\",\"passwordConfirm\":\"{{new_Password_01}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/changepassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"changepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change_Password_Reversion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Password Updated Successfully. Please login\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{register_Email_01}}\",\"oldpassword\":\"{{new_Password_01}}\",\"newpassword\":\"{{register_Password_01}}\",\"passwordConfirm\":\"{{register_Password_01}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/changepassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"changepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change_Password_02_Invalid_Access_Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "1259558",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{register_Email_01}}\",\"oldpassword\":\"{{new_Password_01}}\",\"newpassword\":\"{{register_Password_01}}\",\"passwordConfirm\":\"{{register_Password_01}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/changepassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"changepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change_Password_03_Empty_Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please provide all the details\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"\",\"oldpassword\":\"\",\"newpassword\":\"\",\"passwordConfirm\":\"\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/changepassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"changepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change_Password_04_Invalid_Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"No user exists with that email\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{register_Password_01}}\",\"oldpassword\":\"{{register_Password_01}}\",\"newpassword\":\"{{new_Password_01}}\",\"passwordConfirm\":\"{{new_Password_01}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/changepassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"changepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change_Password_05_Invalid_Old_Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Old Password\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{register_Email_01}}\",\"oldpassword\":\"{{register_Email_01}}\",\"newpassword\":\"{{new_Password_01}}\",\"passwordConfirm\":\"{{new_Password_01}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/changepassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"changepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change_Password_06_Different_New_And_Confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Passwords do not match\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{register_Email_01}}\",\"oldpassword\":\"{{register_Password_01}}\",\"newpassword\":\"{{new_Password_01}}\",\"passwordConfirm\":\"{{register_Password_01}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/changepassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"changepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change_Password_07_Password_Without_Condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Password must contain atleast one digit and one letter\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"email\":\"{{register_Email_01}}\",\"oldpassword\":\"{{register_Password_01}}\",\"newpassword\":\"1212\",\"passwordConfirm\":\"1212\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/changepassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"changepassword"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Set_Password",
			"item": [
				{
					"name": "Set_Password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"password\": \"{{register_Password_01}}\", \"passwordConfirm\": \"{{register_Password_01}}\",\"token\":\"{{global_Token_01}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/password/setpassword",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"password",
								"setpassword"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contact",
			"item": [
				{
					"name": "Add_Contact",
					"item": [
						{
							"name": "Acc_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_01\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_01\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_01\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_01\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_01}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_01_Happy_Path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_01\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_01\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact created successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"company\":\"{{account_Id_01}}\",\"owner\":\"{{user_Id_01}}\",\"email\":\"{{contact_Email_01}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact created successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_02\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_02\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_02\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"Contact_Last_Name_02\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_02\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_02\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fName\":\"{{contact_First_Name_02}}\",\"lName\":\"{{contact_Last_Name_02}}\",\"company\":\"{{account_Id_01}}\",\"owner\":\"{{user_Id_02}}\",\"email\":\"{{contact_Email_02}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_03_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact created successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_03\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_03\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_03\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_03\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_03\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_03\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fName\":\"{{contact_First_Name_03}}\",\"lName\":\"{{contact_Last_Name_03}}\",\"company\":\"{{account_Id_01}}\",\"owner\":\"{{user_Id_01}}\",\"email\":\"{{contact_Email_03}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_04_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact created successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_04\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_04\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_04\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"Contact_Last_Name_04\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_04\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_04\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fName\":\"{{contact_First_Name_04}}\",\"lName\":\"{{contact_Last_Name_04}}\",\"company\":\"{{account_Id_01}}\",\"owner\":\"{{user_Id_01}}\",\"email\":\"{{contact_Email_04}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"company\":\"{{account_Id_01}}\",\"owner\":\"{{user_Id_01}}\",\"email\":\"{{contact_Email_01}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}"
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_06_Empty_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Add contact with empty field\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email is required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fName\":\"\",\"lName\":\"\",\"company\":\"\",\"owner\":\"\",\"email\":\"\",\"emailType\":\"\",\"title\":\"\",\"phone\":\"\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"\",\"street\":\"\",\"city\":\"\",\"state\":\"\",\"country\":\"\",\"code\":\"\",\"linkedin\":\"\",\"facebook\":\"\",\"timezone\":\"\",\"tags\":[\"\"],\"type\":\"\",\"twitter\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Contact",
					"item": [
						{
							"name": "Con_Get_All_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.globals.get(\"contact_Id_01\");\r",
											"\r",
											"var fName1 = pm.globals.get(\"contact_First_Name_01\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"const userIds = [];\r",
											"_.forEach(_.filter(jsonData.results, c => c.fName === fName1),\r",
											"  item => { userIds.push(item._id); });\r",
											"console.log(userIds);\r",
											"pm.globals.set(\"contact_Id_01\", userIds);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_All_02_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.globals.get(\"contact_Id_02\");\r",
											"\r",
											"var fName2 = pm.globals.get(\"contact_First_Name_02\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"const userIds = [];\r",
											"_.forEach(_.filter(jsonData.results, c => c.fName === fName2),\r",
											"  item => { userIds.push(item._id); });\r",
											"console.log(userIds);\r",
											"pm.globals.set(\"contact_Id_02\", userIds);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_All_03_Happy_Path Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.globals.get(\"contact_Id_03\");\r",
											"\r",
											"var fName3 = pm.globals.get(\"contact_First_Name_03\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"const userIds = [];\r",
											"_.forEach(_.filter(jsonData.results, c => c.fName === fName3),\r",
											"  item => { userIds.push(item._id); });\r",
											"console.log(userIds);\r",
											"pm.globals.set(\"contact_Id_03\", userIds);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_All_04_Happy_Path Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.globals.get(\"contact_Id_04\");\r",
											"\r",
											"var fName3 = pm.globals.get(\"contact_First_Name_04\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"const userIds = [];\r",
											"_.forEach(_.filter(jsonData.results, c => c.fName === fName3),\r",
											"  item => { userIds.push(item._id); });\r",
											"console.log(userIds);\r",
											"pm.globals.set(\"contact_Id_04\", userIds);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_All_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Add contact with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "122143535412425454656534543",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Contact/:Id",
					"item": [
						{
							"name": "Con_Get_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"var fName = pm.globals.get(\"contact_First_Name_01\");\r",
											"pm.test(\"Get contact\", function () {\r",
											"    pm.expect(jsonData[0].fName).to.include(fName);\r",
											"});\r",
											"\r",
											"var lName = pm.globals.get(\"contact_Last_Name_01\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(jsonData[0].lName).to.include(lName);\r",
											"});\r",
											"\r",
											"var email = pm.globals.get(\"contact_Email_01\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(jsonData[0].email).to.include(email);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact/{{contact_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"{{contact_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Get contact with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MWQ",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact/{{contact_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"{{contact_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Get contact with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact/1212",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"1212"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_04_Mismatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Get contact for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact/{{contact_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"{{contact_Id_01}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Notes_Contact",
					"item": [
						{
							"name": "Create_Note_Contact",
							"item": [
								{
									"name": "Create_Note_01_Happy_Path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note created\");\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"pm.globals.set(\"note_Id_01\",jsonData.note._id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"contact\":\"{{contact_Id_01}}\",\"notes\":\"{{notes}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create_Note_02_Invalid_Access_Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "1212",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"contact\":\"{{contact_Id_01}}\",\"notes\":\"{{notes}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create_Note_03_Invalid_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"contact\":\"1596546\",\"notes\":\"{{notes}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create_Note_04_Empty_Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note cannot be empty\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"contact\":\"{{contact_Id_01}}\",\"notes\":\"\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create_Note_05_Miss_Match_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"No Contact found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"contact\":\"{{contact_Id_02}}\",\"notes\":\"{{notes}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit_Note_Contact",
							"item": [
								{
									"name": "Edit_Note_01_Happy_Path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note updated\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"{{note_Id_01}}\",\"notes\":\"{{enotes}}\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_Note_02_Access_Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "13548",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"{{note_Id_01}}\",\"notes\":\"{{enotes}}\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_Note_03_Invalid_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"1258\",\"notes\":\"{{enotes}}\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_Note_04_Empty_Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note cannot be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"{{note_Id_01}}\",\"notes\":\"\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_Note_05_Miss_MatchId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note not found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_02}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"{{note_Id_01}}\",\"notes\":\"{{enotes}}\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get_Note_Contact",
							"item": [
								{
									"name": "Get_Note_01_Contact_Happy_Path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"var tag = pm.globals.get(\"note_Id_01\");\r",
													"pm.test(\"Get note tag\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(tag);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v2/notes/{{contact_Id_01}}/contact",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{contact_Id_01}}",
												"contact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Note_02_Contact_Invalid_Access_Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "1212",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v2/notes/{{contact_Id_01}}/contact",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{contact_Id_01}}",
												"contact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Note_03_Contact_Invalid_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v2/notes/12121/contact",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"12121",
												"contact"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete_Note_Contact",
							"item": [
								{
									"name": "Delete_note_01_Happy_Path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note deleted\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes/{{note_Id_01}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{note_Id_01}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_note_02_Invalid_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes/12121",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"12121"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_Note_03_Invalid_Access_Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "12121",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes/{{note_Id_01}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{note_Id_01}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_note_04_Miss_Match_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note not found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_02}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes/{{note_Id_01}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{note_Id_01}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Archive_Contact",
					"item": [
						{
							"name": "Con_Archive_01_Archive_Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Contact(s) Archived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{contact_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Archive_02_Archive_Mul_Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Contact(s) Archived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{contact_Id_03}}\",\"archive\":false},{\"_id\":\"{{contact_Id_04}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Archive_03_Already_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Archive contact which is already archived\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Contact(s) Unarchived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{contact_Id_01}}\",\"archive\":true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Archive_Mul_Tag_04_Already_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Archive multiple contact which is already archived\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Contact(s) Unarchived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{contact_Id_03}}\",\"archive\":true},{\"_id\":\"{{contact_Id_04}}\",\"archive\":true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Archive_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Archive contact with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1235466262",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{contactid1}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Archive_06_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive contact with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"68986464644641654165\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Archive_07_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive contact with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Contact(s) to Archive\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{contact_Id_02}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add_Contact_Tag",
					"item": [
						{
							"name": "Con_Add_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact tag successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag_01}}\",\"selected\":[\"{{contact_Id_01}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact tag successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag_01}}\",\"selected\":[\"{{contact_Id_02}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_Tag_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23235423523",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag_01}}\",\"selected\":[\"{{contact_Id_02}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_Tag_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Add contact tag with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag_01}}\",\"selected\":[\"1258\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_Tag_05_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact tag for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Contact(s)  found with selected ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag_01}}\",\"selected\":[\"{{contact_Id_02}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_Tag_06_Empty_Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Add contact tag with empty tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag cannot be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"\",\"selected\":[\"{{contact_Id_01}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_Mul_Tag_07_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add contact tag with multiple tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag_01}}\",\"selected\":[\"{{contact_Id_03}}\",\"{{contact_Id_04}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Contact_Tag",
					"item": [
						{
							"name": "Con_Get_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"var tag = pm.globals.get(\"contact_Tag_01\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{contact_Id_01}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var tag = pm.globals.get(\"contact_Tag\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{contact_Id_02}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_Tag_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23235423523",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{contact_Id_01}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_Tag_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"123456\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_Tag_05_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Tags Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{contact_Id_02}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag",
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Tags",
					"item": [
						{
							"name": "Get_All_Tags_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"var tag = pm.globals.get(\"contact_Tag_01\");\r",
											"pm.test(\"Get snippet tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_All_Tags_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tags"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove_Contact_Tag",
					"item": [
						{
							"name": "Con_Remove_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Remove contact tag successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag_01}}\",\"selected\":[\"{{contact_Id_01}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Remove_Mul_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Remove contact tag for multiple tags successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag_01}}\",\"selected\":[\"{{contact_Id_03}}\",\"{{contact_Id_04}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Remove_Tag_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove contact tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123123",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag}}\",\"selected\":[\"{{contact_Id_03}}\",\"{{contact_Id_04}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Remove_Tag_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Remove contact tag with invalid\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag}}\",\"selected\":[\"123456\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Remove_Tag_05_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove contact tag with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Contact found with this Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{contact_Tag}}\",\"selected\":[\"{{contact_Id_02}}\"]}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"tag"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contact_Lookups",
					"item": [
						{
							"name": "Contact_Lookups_01_Happypath",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"var fName = pm.globals.get(\"contact_First_Name_01\");\r",
											"pm.test(\"Get contact\", function () {\r",
											"    pm.expect(jsonData[0].fName).to.include(fName);\r",
											"});\r",
											"\r",
											"var lName = pm.globals.get(\"contact_Last_Name_01\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(jsonData[0].lName).to.include(lName);\r",
											"});\r",
											"\r",
											"var email = pm.globals.get(\"contact_Email_01\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(jsonData[0].email).to.include(email);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/lookup?input={{contact_First_Name_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"lookup"
									],
									"query": [
										{
											"key": "input",
											"value": "{{contact_First_Name_01}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact_Lookups_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "535",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/lookup?input={{contact_First_Name_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"lookup"
									],
									"query": [
										{
											"key": "input",
											"value": "{{contact_First_Name_01}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Contact_Lookups_03_Invalid_Input",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/lookup?input=input",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"lookup"
									],
									"query": [
										{
											"key": "input",
											"value": "input"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Contact",
					"item": [
						{
							"name": "Con_Edit_01_Edit_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Edit contact successfully\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Efirst_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Elast_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Eemail_01\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Eemail_01\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{contact_Id_01}}\",\"fName\":\"{{contact_Efirst_Name_01}}\",\"lName\":\"{{contact_Elast_Name_01}}\",\"company\":\"{{account_Id_01}}\",\"email\":\"{{contact_Eemail_01}}\",\"emailType\":\"\",\"title\":\"\",\"phone\":\"\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"\",\"street\":\"\",\"city\":\"\",\"state\":\"\",\"country\":\"\",\"code\":\"\",\"linkedin\":\"\",\"facebook\":\"\",\"type\":\"\",\"owner\":\"{{user_Id_01}}\",\"tags\":[\"Tag\"],\"archive\":false,\"timezone\":\"Asia/Calcutta\",\"views\":0,\"clicks\":0,\"totalEmailSent\":0,\"isUnsubscribed\":false,\"AccountId\":\"{{user_Id_01}}\",\"fName_fuzzy\":[],\"lName_fuzzy\":[],\"notes\":[],\"createdAt\":\"2022-11-16T05:38:18.997Z\",\"updatedAt\":\"2022-11-16T05:38:37.621Z\",\"__v\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Edit_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1212121212",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{contact_Id_01}}\",\"fName\":\"{{contact_Efirst_Name_01}}\",\"lName\":\"{{contact_LElast_Name_01}}\",\"company\":null,\"email\":\"{{contact_Eemail_01}}\",\"emailType\":\"\",\"title\":\"\",\"phone\":\"\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"New\",\"street\":\"\",\"city\":\"\",\"state\":\"\",\"country\":\"\",\"code\":\"\",\"linkedin\":\"\",\"facebook\":\"\",\"type\":\"\",\"tags\":[\"tag\",\"hai\"],\"archive\":false,\"timezone\":\"Asia/Calcutta\",\"views\":0,\"clicks\":0,\"totalEmailSent\":0,\"isUnsubscribed\":false,\"AccountId\":\"{{account_Id_01}}\",\"fName_fuzzy\":[],\"lName_fuzzy\":[],\"notes\":[],\"createdAt\":\"\",\"updatedAt\":\"\",\"__v\":0}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Edit_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit contact with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"6848\",\"fName\":\"{{contact_Efirst_Name_01}}\",\"lName\":\"{{contact_LElast_Name_01}}\",\"company\":null,\"email\":\"{{contact_Eemail_01}}\",\"emailType\":\"\",\"title\":\"\",\"phone\":\"\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"New\",\"street\":\"\",\"city\":\"\",\"state\":\"\",\"country\":\"\",\"code\":\"\",\"linkedin\":\"\",\"facebook\":\"\",\"type\":\"\",\"tags\":[\"tag\",\"hai\"],\"archive\":false,\"timezone\":\"Asia/Calcutta\",\"views\":0,\"clicks\":0,\"totalEmailSent\":0,\"isUnsubscribed\":false,\"AccountId\":\"{{account_Id_01}}\",\"fName_fuzzy\":[],\"lName_fuzzy\":[],\"notes\":[],\"createdAt\":\"\",\"updatedAt\":\"\",\"__v\":0}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Edit_04_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit contact for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{contact_Id_01}}\",\"fName\":\"{{contact_Efirst_Name_01}}\",\"lName\":\"{{contact_LElast_Name_01}}\",\"company\":null,\"email\":\"{{contact_Eemail_01}}\",\"emailType\":\"\",\"title\":\"\",\"phone\":\"\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"New\",\"street\":\"\",\"city\":\"\",\"state\":\"\",\"country\":\"\",\"code\":\"\",\"linkedin\":\"\",\"facebook\":\"\",\"type\":\"\",\"tags\":[\"tag\",\"hai\"],\"archive\":false,\"timezone\":\"Asia/Calcutta\",\"views\":0,\"clicks\":0,\"totalEmailSent\":0,\"isUnsubscribed\":false,\"AccountId\":\"{{account_Id_01}}\",\"fName_fuzzy\":[],\"lName_fuzzy\":[],\"notes\":[],\"createdAt\":\"\",\"updatedAt\":\"\",\"__v\":0}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Contact",
					"item": [
						{
							"name": "Con_Delete__01_DeleteContact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact(s) Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{contact_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Delete_Mul_02_DeleteContact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Delete multiple contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact(s) Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{contact_Id_03}}\",\"{{contact_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Delete_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Delete contact with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "35465465463543654",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{contact_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Delete_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Delete contact with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"655\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Delete_05_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete contact with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Contacts to Delete\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{contact_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Delete_06_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"var conid = pm.globals.get(\"contact_Id_01\");\r",
											"pm.test(\"Get contact\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"conid\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Contact_From_Excel",
					"item": [
						{
							"name": "Con_Upload_01_Happy_Path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_01\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_01\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.imported).to.eql(1);\r",
											"});;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"email\":\"{{contact_Email_01}}\",\"phone\":\"{{contact_Phone}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"timezone\":\"{{contact_Timezone}}\"}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/addContactFromExcel",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"addContactFromExcel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Upload_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_01\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_01\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1256",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"email\":\"{{contact_Email_01}}\",\"phone\":\"{{contact_Phone}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"timezone\":\"{{contact_Timezone}}\"}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/addContactFromExcel",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"addContactFromExcel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Upload_03_Empty_Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_01\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_01\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"`email` is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"email\":\"\",\"phone\":\"{{contact_Phone}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"timezone\":\"{{contact_Timezone}}\"}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/addContactFromExcel",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"addContactFromExcel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Upload_04_Invalid_Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_01\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_01\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"email\":\"{{contact_City}}\",\"phone\":\"{{contact_Phone}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"timezone\":\"{{contact_Timezone}}\"}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/addContactFromExcel",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"addContactFromExcel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Upload_05_Uploaded_Email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.skipped).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"email\":\"{{contact_Email_01}}\",\"phone\":\"{{contact_Phone}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"timezone\":\"{{contact_Timezone}}\"}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact/addContactFromExcel",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact",
										"addContactFromExcel"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Snippets",
			"item": [
				{
					"name": "Add_Snippets",
					"item": [
						{
							"name": "Sni_Add_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_01\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Tag_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snisub);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_01}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_01}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_02\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_02\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_02\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snitag = pm.globals.get(\"snippets_Tag_02\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snitag);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_02}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_02}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_03_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_03\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_03\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_03\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snitag = pm.globals.get(\"snippets_Tag_03\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snitag);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_03}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_03}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_03}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_04_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_04\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_04\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_04\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snitag = pm.globals.get(\"snippets_Tag_04\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snitag);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_04}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_04}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Add snippet with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_01}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_01}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_06_Empty_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Add snippet with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"snippet validation failed: name: Path `name` is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"\",\"subject\":\"\",\"description\":\"\",\"tag\":[],\"type\":\"\",\"tags\":[\"\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Snippets",
					"item": [
						{
							"name": "Sni_Get_All_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var sniid = pm.globals.get(\"snippet_Id_01\");\r",
											"pm.test(\"Get snippet\", function () {\r",
											" pm.expect(pm.response.text()).to.include(sniid);\r",
											"});\r",
											"\r",
											"var sniname = pm.globals.get(\"snippets_Name_01\");\r",
											"pm.test(\"Get snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_01\");\r",
											"pm.test(\"Get snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(snisub);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/snippets?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Get_All_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Get snippet with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "122143535412425454656534543",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/snippets?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add_Snippets_Tag",
					"item": [
						{
							"name": "Sni_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_01\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Tag_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snisub);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_01}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_01}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add tag to snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"Tag_01\");\r",
											"var repositoryName =pm.variables.replaceIn('con{{currentdate}}')+\"snippet\";\r",
											"pm.globals.set(\"Tag_01\",repositoryName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{Tag_01}}\",\"selected\":[\"{{snippet_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_02_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_02\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_02\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_02\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snitag = pm.globals.get(\"snippets_Tag_02\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snitag);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_02}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_02}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add tag to snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"Tag_01\");\r",
											"var repositoryName =pm.variables.replaceIn('con{{currentdate}}')+\"snippet\";\r",
											"pm.globals.set(\"Tag_01\",repositoryName);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{Tag_01}}\",\"selected\":[\"{{snippet_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_03_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_03\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_03\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_03\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snitag = pm.globals.get(\"snippets_Tag_03\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snitag);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_03}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_03}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_03}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_04_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_04\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_04\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_04\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snitag = pm.globals.get(\"snippets_Tag_04\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snitag);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_04}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_04}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/addsnippet",
									"host": [
										"{{url}}"
									],
									"path": [
										"addsnippet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_Mul_Tag_03_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add tag to multiple snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{Tag_01}}\",\"selected\":[\"{{snippet_Id_04}}\",\"{{snippet_Id_03}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_Tag_04_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Add tag to snippet with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23235423523",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_Tag_05_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Add tag to snippet with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{snippet_Tag}}\",\"selected\":[\"12123\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_Tag_06_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add tag to snippet for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Snippet found with selected ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{snippet_Tag}}\",\"selected\":[\"{{snippet_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Add_Tag_07_Empty_Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add Empty tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Please enter tag\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"\",\"selected\":[\"{{snippet_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Snippets_Tag",
					"item": [
						{
							"name": "Sni_Get_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"var tag = pm.globals.get(\"snippet_Tag\");\r",
											"pm.test(\"Get snippet tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});\r",
											"\r",
											"var tag = pm.globals.get(\"snippets_Tag_01\");\r",
											"pm.test(\"Get snippet tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{snippet_Id_01}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Get_Tag_04_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Get snippet tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23235423523",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{snippet_Id_01}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Get_Tag_05_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Get snippet tag with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"12121\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Get_Tag_06_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Get snippet tag for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Snippet found with this ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{snippet_Id_02}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag",
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove_Snippets_Tag",
					"item": [
						{
							"name": "Sni_Remove_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove snippet tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{snippet_Tag}}\",\"selected\":[\"{{snippet_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Remove_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Remove snippet tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{snippet_Tag}}\",\"selected\":[\"{{snippet_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Remove_Mul__Tag_03_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag for multiple snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{snippet_Tag}}\",\"selected\":[\"{{snippet_Id_04}}\",\"{{snippet_Id_03}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Remove_Tag_04_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag for invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123123",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{snippet_Tag}}\",\"selected\":[\"{{snippet_Id_04}}\",\"{{snippet_Id_03}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Remove_Tag_05_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Remove tag for invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{snippet_Tag}}\",\"selected\":[\"12121\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Remove_Tag_06_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag fir missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Snippet found with selected ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{snippet_Tag}}\",\"selected\":[\"{{snippet_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tag"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Archive_Snippet",
					"item": [
						{
							"name": "Sni_Archive_01_Archive_Snippet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Snippet(s) Archived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{snippet_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Archive_Mul_02_Archive_Snippet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive multiple snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Snippet(s) Archived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\": \"{{snippet_Id_03}}\", \"archive\": false}, {\"_id\": \"{{snippet_Id_04}}\", \"archive\": false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Archive_03_Already_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Archiving the already archived snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Snippet(s) Unarchived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{snippet_Id_01}}\",\"archive\":true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Archive_04_Already_Mul_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Archiving the already archived multiple snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Snippet(s) Unarchived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\": \"{{snippet_Id_03}}\", \"archive\": true}, {\"_id\": \"{{snippet_Id_04}}\", \"archive\": true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Archive_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive snippet with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1235466262",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{snippet_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Archive_06_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Archive snippet with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"1212\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Archive_07_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive snippet for miss match id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Snippet not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{snippet_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Snippets",
					"item": [
						{
							"name": "Sni_Edit_01_Edit_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Edit snippet\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{snippet_Id_01}}\",\"name\":\"{{snippet_Ename}}\",\"subject\":\"\",\"description\":\"{{snippet_Edescription}}\",\"tags\":[\"{{snippet_Etag}}\"],\"archive\":false,\"type\":\"personal\",\"AccountId\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Edit_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Edit snippet with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1212121212",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{snippet_Id_01}}\",\"name\":\"{{snippet_Ename}}\",\"subject\":\"\",\"description\":\"{{snippet_Edescription}}\",\"tags\":[\"{{snippet_Etag}}\"],\"archive\":false,\"type\":\"personal\",\"AccountId\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Edit_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Edit snippet with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid ID or ID is not provided\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"12121\",\"name\":\"{{snippet_Ename}}\",\"subject\":\"\",\"description\":\"{{snippet_Edescription}}\",\"tags\":[\"{{snippet_Etag}}\"],\"archive\":false,\"type\":\"personal\",\"AccountId\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Edit_04_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit snippet for miss match id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Snippet found for the ID\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{snippet_Id_01}}\",\"name\":\"{{snippet_Ename}}\",\"subject\":\"\",\"description\":\"{{snippet_Edescription}}\",\"tags\":[\"{{snippet_Etag}}\"],\"archive\":false,\"type\":\"personal\",\"AccountId\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Snippets",
					"item": [
						{
							"name": "Sni_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_01\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Tag_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snisub);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_01}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_01}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Delete__01_Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Snippet(s) Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{snippet_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Delete__02_Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Delete snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Snippet(s) Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{snippet_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Delete_Mul_03_Delete_Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Delete multiple snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Snippet(s) Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{snippet_Id_03}}\",\"{{snippet_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Delete_04_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete snippet with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "35465465463543654",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{snippet_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Delete_05_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete snippet with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"12121\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Delete_06_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete snippet for miss match id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Snippet(s) to Delete\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{snippet_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Delete_07_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"var sniid = pm.globals.get(\"snippet_Id_01\");\r",
											"pm.test(\"Get snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"sniid\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/snippets?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upload_Snippet",
					"item": [
						{
							"name": "Snip_upload_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Upload snippet\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"name\":\"{{snippets_Name_01}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_01}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_01}}\"]},{\"name\":\"{{snippets_Name_02}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_02}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_02}}\"]}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/addSnippetsfromexcel",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"addSnippetsfromexcel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sni_Get_All_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var sniid = pm.globals.get(\"snippets_Name_01\");\r",
											"pm.test(\"Get snippet\", function () {\r",
											" pm.expect(pm.response.text()).to.include(sniid);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/snippets?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Snip_upload_02_Empty_Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Upload snippet with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"name\":\"\",\"subject\":\"\",\"description\":\"\",\"type\":\"\",\"tags\":\"\"},{\"name\":\"\",\"subject\":\"\",\"description\":\"\",\"type\":\"\",\"tags\":\"\"}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/addSnippetsfromexcel",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"addSnippetsfromexcel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Snip_upload_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Upload snippet with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"name\":\"{{snippets_Name_01}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_01}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_01}}\"]},{\"name\":\"{{snippets_Name_02}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_02}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_02}}\"]}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/snippets/addSnippetsfromexcel",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"addSnippetsfromexcel"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Tags",
					"item": [
						{
							"name": "Get_All_Snippets_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"var tag = pm.globals.get(\"snippets_Tag_01\");\r",
											"pm.test(\"Get snippet tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/snippets/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_All_Snippets_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/snippets/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"snippets",
										"tags"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "lookups",
			"item": [
				{
					"name": "Contact_Lookups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var fName = pm.globals.get(\"contact_First_Name_01\");\r",
									"pm.test(\"Get contact\", function () {\r",
									"    pm.expect(jsonData[0].fName).to.include(fName);\r",
									"});\r",
									"\r",
									"var lName = pm.globals.get(\"contact_Last_Name_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData[0].lName).to.include(lName);\r",
									"});\r",
									"\r",
									"var email = pm.globals.get(\"contact_Email_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData[0].email).to.include(email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/contact/lookup?input={{contact_First_Name_01}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"contact",
								"lookup"
							],
							"query": [
								{
									"key": "input",
									"value": "{{contact_First_Name_01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sequences_Lookups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var fName = pm.globals.get(\"contact_First_Name_01\");\r",
									"pm.test(\"Get contact\", function () {\r",
									"    pm.expect(jsonData[0].fName).to.include(fName);\r",
									"});\r",
									"\r",
									"var lName = pm.globals.get(\"contact_Last_Name_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData[0].lName).to.include(lName);\r",
									"});\r",
									"\r",
									"var email = pm.globals.get(\"contact_Email_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData[0].email).to.include(email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/sequences/lookup?input={{sequences_Id_01}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"sequences",
								"lookup"
							],
							"query": [
								{
									"key": "input",
									"value": "{{sequences_Id_01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Company_Lookups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var fName = pm.globals.get(\"account_Name_01\");\r",
									"pm.test(\"Get contact\", function () {\r",
									"    pm.expect(jsonData[0].fullName).to.include(fName);\r",
									"});\r",
									"\r",
									"\r",
									"var email = pm.globals.get(\"account_Id_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData[0].id).to.include(email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/company/lookup?input={{account_Name_01}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"company",
								"lookup"
							],
							"query": [
								{
									"key": "input",
									"value": "{{account_Name_01}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Template_Lookups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var fName = pm.globals.get(\"template_Name_01\");\r",
									"pm.test(\"Get contact\", function () {\r",
									"    pm.expect(jsonData[0].name).to.include(fName);\r",
									"});\r",
									"\r",
									"\r",
									"var email = pm.globals.get(\"template_Id_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData[0].id).to.include(email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/template/lookup?input={{template_Name_01}}&type={{template_Type}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"template",
								"lookup"
							],
							"query": [
								{
									"key": "input",
									"value": "{{template_Name_01}}"
								},
								{
									"key": "type",
									"value": "{{template_Type}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Snippets_Lookups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var fName = pm.globals.get(\"snippets_Name_01\");\r",
									"pm.test(\"Get contact\", function () {\r",
									"    pm.expect(jsonData[0].name).to.include(fName);\r",
									"});\r",
									"\r",
									"\r",
									"var email = pm.globals.get(\"snippet_Id_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData[0].id).to.include(email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/snippets/lookup?input={{snippets_Name_01}}&type={{snippets_Type}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"snippets",
								"lookup"
							],
							"query": [
								{
									"key": "input",
									"value": "{{snippets_Name_01}}"
								},
								{
									"key": "type",
									"value": "{{snippets_Type}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User_Lookups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"var fName = pm.globals.get(\"register_First_Name_01\");\r",
									"pm.test(\"Get contact\", function () {\r",
									"    pm.expect(jsonData[0].firstname).to.include(fName);\r",
									"});\r",
									"\r",
									"\r",
									"var email = pm.globals.get(\"register_Last_Name_01\");\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(jsonData[0].lastname).to.include(email);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v2/auth/lookup?input={{register_First_Name_01}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"lookup"
							],
							"query": [
								{
									"key": "input",
									"value": "{{register_First_Name_01}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Email_Availability_Check",
			"item": [
				{
					"name": "Email_Avaliability_Check_01_Already_Eist_Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email already exists\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v2/auth/checkEmailAvailability/{{register_Email_01}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"checkEmailAvailability",
								"{{register_Email_01}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email_Avaliability_Check_02_New_Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email available\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v2/auth/checkEmailAvailability/{{Email}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"checkEmailAvailability",
								"{{Email}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email_Avaliability_Check_03_Invalid_Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Please provide a valid email\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/v2/auth/checkEmailAvailability/02",
							"host": [
								"{{url}}"
							],
							"path": [
								"v2",
								"auth",
								"checkEmailAvailability",
								"02"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "Add_Account",
					"item": [
						{
							"name": "Acc_Add_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_01\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_01\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_01\");\r",
											"var Repositoryname =pm.variables.replaceIn('acc1{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_01\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_01}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_02\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_02\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_02\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_02\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_02\");\r",
											"var Repositoryname =pm.variables.replaceIn('acc2{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_02\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_02}}\",\"companyPhone\":\"{{account_Phone_Number_02}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_02}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_02}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Company added with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_01\");\r",
											"var Repositoryname =pm.variables.replaceIn('{{currentdate}}')+\"569\";\r",
											"pm.globals.set(\"account_Web_01\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_01}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_06_Empty_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"`website` is required.\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_01\");\r",
											"var Repositoryname =pm.variables.replaceIn('{{currentdate}}')+\"569\";\r",
											"pm.globals.set(\"account_Web_01\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"\",\"companyPhone\":\"\",\"address\":\"\",\"city\":\"\",\"country\":\"\",\"state\":\"\",\"code\":\"\",\"companyLinkedin\":\"\",\"companyFacebook\":\"\",\"twitter\":\"\",\"website\":\"\",\"industry\":\"\",\"about\":\"\",\"numOfEmps\":\"\",\"filePath\":\"\",\"owner\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_03_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_03\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_03\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_03\");\r",
											"var Repositoryname =pm.variables.replaceIn('acc3{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_03\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_03}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_04_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_04\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_04\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_04\");\r",
											"var Repositoryname =pm.variables.replaceIn('acc4{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_04\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_04}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Account/:Id",
					"item": [
						{
							"name": "Acc_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_01\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_01\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_01\");\r",
											"var Repositoryname =pm.variables.replaceIn('accgetid{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_01\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_01}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_01\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/company/{{account_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"{{account_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Get company with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MWQ",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/company/{{account_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"{{account_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Get company with invalid contact id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/company/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"12121"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_04_Mismatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Get company with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Company Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/company/{{account_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"{{account_Id_02}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Account",
					"item": [
						{
							"name": "Acc_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_01\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_01\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_01\");\r",
											"var Repositoryname =pm.variables.replaceIn('getall{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_01\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_01}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_All_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_01\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/company?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_All_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Get company Invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/company?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Notes_Account",
					"item": [
						{
							"name": "Create_Note_Company",
							"item": [
								{
									"name": "Create_Note_01_Happy_Path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note created\");\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"pm.globals.set(\"note_Id_02\",jsonData.note._id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"company\":\"{{account_Id_01}}\",\"notes\":\"{{notes}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create_Note_02_Invalid_Access_Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "1212",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"company\":\"{{account_Id_01}}\",\"notes\":\"{{notes}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create_Note_03_Invalid_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"company\":\"159872\",\"notes\":\"{{notes}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create_Note_04_Empty_Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note cannot be empty\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"company\":\"{{account_Id_01}}\",\"notes\":\"\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create_Note_05_Miss_Match_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"No Company found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"company\":\"{{account_Id_02}}\",\"notes\":\"{{notes}}\"}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Edit_Note_Company",
							"item": [
								{
									"name": "Edit_Note_01_Happy_Path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note updated\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"{{note_Id_02}}\",\"notes\":\"{{enotes}}\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_Note_02_Access_Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "13548",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"{{note_Id_02}}\",\"notes\":\"{{enotes}}\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_Note_03_Invalid_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"1258\",\"notes\":\"{{enotes}}\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_Note_04_Empty_Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note cannot be empty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"{{note_Id_02}}\",\"notes\":\"\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Edit_Note_05_Miss_MatchId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note not found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_02}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\"id\":\"{{note_Id_02}}\",\"notes\":\"{{enotes}}\",\"isEdited\":true}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Get_Note_Company",
							"item": [
								{
									"name": "Get_Note_01_Company_Happy_Path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"var tag = pm.globals.get(\"note_Id_02\");\r",
													"pm.test(\"Get note tag\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(tag);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v2/notes/{{account_Id_01}}/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{account_Id_01}}",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Note_02_Company_Invalid_Access_Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "1212",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v2/notes/{{account_Id_01}}/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{account_Id_01}}",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get_Note_03_Company_Invalid_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/v2/notes/12121/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"12121",
												"company"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete_Note_Account",
							"item": [
								{
									"name": "Delete_note_01_Happy_Path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note deleted\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes/{{note_Id_02}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{note_Id_02}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_note_02_Invalid_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_01}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes/12121",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"12121"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_Note_03_Invalid_Access_Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "12121",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes/{{note_Id_02}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{note_Id_02}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete_note_04_Miss_Match_Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Note not found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{global_Token_02}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/v2/notes/{{note_Id_02}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"v2",
												"notes",
												"{{note_Id_02}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Add_Account_Tag",
					"item": [
						{
							"name": "Acc_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_01\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_01\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_01\");\r",
											"var Repositoryname =pm.variables.replaceIn('acctag{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_01\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_01}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for account successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{account_Tag}}\",\"selected\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_02_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_02\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_02\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_02\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_02\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_02\");\r",
											"var Repositoryname =pm.variables.replaceIn('acctag2{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_02\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_02}}\",\"companyPhone\":\"{{account_Phone_Number_02}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_02}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_02}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for account successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{account_Tag}}\",\"selected\":[\"{{account_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_Mul_Tag_03_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for multiple account successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{account_Tag}}\",\"selected\":[\"{{account_Id_03}}\",\"{{account_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_Tag_04_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Add a tag for account with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23235423523",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{tag}}\",\"selected\":[\"{{account_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_Tag_05_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Add a tag for account with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{tag}}\",\"selected\":[\"123123\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_Tag_06_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for account with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Account found with selected ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{tag}}\",\"selected\":[\"{{account_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Add_Tag_07_Empty_Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for account with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag cannot be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"\",\"selected\":[\"{{account_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Account_Tag",
					"item": [
						{
							"name": "Acc_Get_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"var tag = pm.globals.get(\"account_Tag\");\r",
											"pm.test(\"Get account tag successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var tag = pm.globals.get(\"account_Tag\");\r",
											"pm.test(\"Get account tag successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"{{account_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_Tag_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Get account tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23235423523",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_Tag_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Get account tag with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"215245\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_Tag_05_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Get account tag with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Tags Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag",
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Tags",
					"item": [
						{
							"name": "Acc_Add_Tag_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for account successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{account_Tag}}\",\"selected\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_All_Tags_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"var tag = pm.globals.get(\"account_Tag\");\r",
											"pm.test(\"Get template tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/company/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_All_Tags_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/company/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tags"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove_Account_Tag",
					"item": [
						{
							"name": "Acc_Remove_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{account_Tag}}\",\"selected\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Remove_Mul_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove multiple tag sucessfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{account_Tag}}\",\"selected\":[\"{{account_Id_03}}\",\"{{account_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Remove_Tag_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123123",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{tag}}\",\"selected\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Remove_Tag_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Remove tag with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{tag}}\",\"selected\":[\"12121\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Remove_Tag_05_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Account found with selected ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{tag}}\",\"selected\":[\"{{account_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Get_Tag_06_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"var tag = pm.globals.get(\"account_Tag\");\r",
											"pm.test(\"Get tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(tag);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"tag",
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Archive_Company",
					"item": [
						{
							"name": "Comp_Archive_01_Archive_Company",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive company successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Company(s) Archived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{account_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Archive_Mul_02_Archive_Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive multiple company successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Company(s) Archived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{account_Id_03}}\",\"archive\":false},{\"_id\":\"{{account_Id_04}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Archive_03_Already_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Archiving the already archived account\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Company(s) Unarchived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{account_Id_01}}\",\"archive\":true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Archive_Mul_04_Already_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Multiple archiving the already archived multiple account\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Company(s) Unarchived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{account_Id_03}}\",\"archive\":true},{\"_id\":\"{{account_Id_04}}\",\"archive\":true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Archive_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive company with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1235466262",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{account_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Archive_06_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Archive company with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Company(s) to Archive\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{user_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Archive_07_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive company with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Company(s) to Archive\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{account_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Company",
					"item": [
						{
							"name": "Comp_Delete__01_DeleteContact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete company successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Delete_Mul_02_DeleteContact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete multiple company successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{account_Id_03}}\",\"{{account_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Delete_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete company with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "35465465463543654",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Delete_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete company with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"12584\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Delete_05_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete company with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Company Not Found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{account_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comp_Delete_06_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"var conid = pm.globals.get(\"account_Id_01\");\r",
											"pm.test(\"Get company\", function () {\r",
											"    pm.expect(pm.response.text()).to.not.include(\"conid\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/company?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Account Copy",
					"item": [
						{
							"name": "Acc_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_01\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_01\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_01\");\r",
											"var Repositoryname =pm.variables.replaceIn('acc1{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_01\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_01}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Edit_01_Edit_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Ename\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Ephonenumber\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Eweb\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Eaddress\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_Ecity\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Ecountry\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_Estate\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Ecode\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Elinkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Efacebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Etwitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Eindustry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_Eabout\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_Eno_Of_Emps\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Eweb\");\r",
											"var Repositoryname =pm.variables.replaceIn('{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Eweb\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{account_Id_01}}\",\"fullName\":\"{{account_Ename}}\",\"companyPhone\":\"{{account_Ephonenumber}}\",\"address\":\"{{account_Eaddress}}\",\"city\":\"{{account_Ecity}}\",\"country\":\"{{account_Ecountry}}\",\"state\":\"{{account_Estate}}\",\"code\":\"{{account_Ecode}}\",\"companyLinkedin\":\"{{account_Elinkedin}}\",\"companyFacebook\":\"{{account_Efacebook}}\",\"twitter\":\"{{account_Etwitter}}\",\"website\":\"{{account_Eweb}}\",\"industry\":\"{{account_Eindustry}}\",\"about\":\"{{account_Eabout}}\",\"numOfEmps\":\"{{account_Eno_Of_Emps}}\",\"filePath\":\"\",\"archive\":false,\"tags\":[],\"contacts\":[],\"AccountId\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/{{account_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"{{account_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Edit_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Edit company with invalid access Token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Eweb\");\r",
											"var Repositoryname =pm.variables.replaceIn('{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Eweb\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1212121212",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{account_Id_01}}\",\"fullName\":\"{{account_Ename}}\",\"companyPhone\":\"{{account_Ephonenumber}}\",\"address\":\"{{account_Eaddress}}\",\"city\":\"{{account_Ecity}}\",\"country\":\"{{account_Ecountry}}\",\"state\":\"{{account_Estate}}\",\"code\":\"{{account_Ecode}}\",\"companyLinkedin\":\"{{account_Elinkedin}}\",\"companyFacebook\":\"{{account_Efacebook}}\",\"twitter\":\"{{account_Etwitter}}\",\"website\":\"{{account_Eweb}}\",\"industry\":\"{{account_Eindustry}}\",\"about\":\"{{account_Eabout}}\",\"numOfEmps\":\"{{account_Eno_Of_Emps}}\",\"filePath\":\"\",\"archive\":false,\"tags\":[],\"contacts\":[],\"AccountId\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/{{account_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"{{account_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Edit_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Edit company with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Eweb\");\r",
											"var Repositoryname =pm.variables.replaceIn('{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Eweb\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"11223\",\"fullName\":\"{{account_Ename}}\",\"companyPhone\":\"{{account_Ephonenumber}}\",\"address\":\"{{account_Eaddress}}\",\"city\":\"{{account_Ecity}}\",\"country\":\"{{account_Ecountry}}\",\"state\":\"{{account_Estate}}\",\"code\":\"{{account_Ecode}}\",\"companyLinkedin\":\"{{account_Elinkedin}}\",\"companyFacebook\":\"{{account_Efacebook}}\",\"twitter\":\"{{account_Etwitter}}\",\"website\":\"{{account_Eweb}}\",\"industry\":\"{{account_Eindustry}}\",\"about\":\"{{account_Eabout}}\",\"numOfEmps\":\"{{account_Eno_Of_Emps}}\",\"filePath\":\"\",\"archive\":false,\"tags\":[],\"contacts\":[],\"AccountId\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/1212",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"1212"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Edit_04_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit company with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Company Not Found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Eweb\");\r",
											"var Repositoryname =pm.variables.replaceIn('{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Eweb\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{account_Id_01}}\",\"fullName\":\"{{account_Ename}}\",\"companyPhone\":\"{{account_Ephonenumber}}\",\"address\":\"{{account_Eaddress}}\",\"city\":\"{{account_Ecity}}\",\"country\":\"{{account_Ecountry}}\",\"state\":\"{{account_Estate}}\",\"code\":\"{{account_Ecode}}\",\"companyLinkedin\":\"{{account_Elinkedin}}\",\"companyFacebook\":\"{{account_Efacebook}}\",\"twitter\":\"{{account_Etwitter}}\",\"website\":\"{{account_Eweb}}\",\"industry\":\"{{account_Eindustry}}\",\"about\":\"{{account_Eabout}}\",\"numOfEmps\":\"{{account_Eno_Of_Emps}}\",\"filePath\":\"\",\"archive\":false,\"tags\":[],\"contacts\":[],\"AccountId\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company/{{account_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company",
										"{{account_Id_02}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Templates",
			"item": [
				{
					"name": "Add_Template",
					"item": [
						{
							"name": "Sni_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"snippet_Id_01\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var sniname = pm.globals.get(\"snippets_Name_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.name).to.include(sniname);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Description_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.description).to.include(snisub);\r",
											"});\r",
											"\r",
											"var snisub = pm.globals.get(\"snippets_Tag_01\");\r",
											"pm.test(\"Add snippet\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(snisub);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{snippets_Name_01}}\",\"subject\":\"\",\"description\":\"{{snippets_Description_01}}\",\"tag\":[],\"type\":\"{{snippets_Type}}\",\"tags\":[\"{{snippets_Tag_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/addsnippet",
									"host": [
										"{{url}}"
									],
									"path": [
										"addsnippet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"template_Id_01\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var temname = pm.globals.get(\"template_Name_01\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.name).to.include(temname);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Subject\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.subject).to.include(temsub);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Description\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.description).to.include(temsub);\r",
											"});\r",
											"var temsub = pm.globals.get(\"template_Tag\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(temsub);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{template_Name_01}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"Person\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"template_Id_02\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var temname = pm.globals.get(\"template_Name_02\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.name).to.include(temname);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Subject\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.subject).to.include(temsub);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Description\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.description).to.include(temsub);\r",
											"});\r",
											"var temsub = pm.globals.get(\"template_Tag\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(temsub);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{template_Name_02}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_03_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"template_Id_03\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var temname = pm.globals.get(\"template_Name_03\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.name).to.include(temname);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Subject\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.subject).to.include(temsub);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Description\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.description).to.include(temsub);\r",
											"});\r",
											"var temsub = pm.globals.get(\"template_Tag\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(temsub);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{template_Name_03}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_04_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"template_Id_04\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var temname = pm.globals.get(\"template_Name_04\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.name).to.include(temname);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Subject\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.subject).to.include(temsub);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Description\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.description).to.include(temsub);\r",
											"});\r",
											"var temsub = pm.globals.get(\"template_Tag\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(temsub);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{template_Name_04}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Added a template with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MWQ",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{template_Name_03}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}"
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_06_Empty_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Added a template with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Please select a type\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"\",\"subject\":\"\",\"description\":\"\",\"tags\":[\"\"],\"type\":\"\",\"snippet\":\"\",\"trackViews\":true,\"trackClicks\":true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Templates",
					"item": [
						{
							"name": "Tem_Get_All_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var tempid = pm.globals.get(\"template_Id_01\");\r",
											"pm.test(\"Get template\", function () {\r",
											" pm.expect(pm.response.text()).to.include(tempid);\r",
											"});\r",
											"\r",
											"var temname = pm.globals.get(\"template_Name_01\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(temname);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Subject\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(temsub);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/template?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Get_All_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Get template with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "122143535412425454656534543",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/getallcompanies?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"getallcompanies"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add_Template_Tag",
					"item": [
						{
							"name": "Tem_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"template_Id_01\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var temname = pm.globals.get(\"template_Name_01\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.name).to.include(temname);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Subject\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.subject).to.include(temsub);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Description\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.description).to.include(temsub);\r",
											"});\r",
											"var temsub = pm.globals.get(\"template_Tag\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(temsub);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{template_Name_01}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"{{template_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_02_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"template_Id_02\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var temname = pm.globals.get(\"template_Name_02\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.name).to.include(temname);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Subject\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.subject).to.include(temsub);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Description\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.description).to.include(temsub);\r",
											"});\r",
											"var temsub = pm.globals.get(\"template_Tag\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(temsub);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{template_Name_02}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"{{template_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_Mul_Tag_03_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for multiple template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"{{template_Id_03}}\",\"{{template_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_Tag_04_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23235423523",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"{{template_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_Tag_05_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"12121\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_Tag_06_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Template found with selected ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"{{template_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Add_Tag_07_Empty_Tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag cannot be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"\",\"selected\":[\"{{template_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Template_Tag",
					"item": [
						{
							"name": "Tem_Get_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"var tag = pm.globals.get(\"template_Tags\");\r",
											"pm.test(\"Get template tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"{{template_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Get_Tag_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Get template tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23235423523",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"{{template_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Get_Tag_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Get template tag with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"1235\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Get_Tag_04_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Get template tag for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Template with the ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"selected\":[\"{{template_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag",
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove_Template_Tag",
					"item": [
						{
							"name": "Tem_Remove_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Remove template tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"{{template_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Remove_Mul_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag for multiple template \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"{{template_Id_03}}\",\"{{template_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Remove_Tag_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove template tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123123",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"{{template_Id_03}}\",\"{{template_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Remove_Tag_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove template tag with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"12121\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Remove_Tag_05_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Remove template tag for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Template found with selected ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{template_Tags}}\",\"selected\":[\"{{template_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tag"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Archive_Template",
					"item": [
						{
							"name": "Tem_Archive_01_Archive_Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Archive template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Templates(s) Archived \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{template_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Archive_Mul_02_Archive_Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Archive multiple template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Templates(s) Archived \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{template_Id_03}}\",\"archive\":false},{\"_id\":\"{{template_Id_04}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Archive_03_Already_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Archiving already archived template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Templates(s) Unarchived \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{template_Id_01}}\",\"archive\":true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Archive_Mul_04_Already_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Archiving already archived multiple template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Templates(s) Unarchived \");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{template_Id_03}}\",\"archive\":true},{\"_id\":\"{{template_Id_04}}\",\"archive\":true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Archive_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive template with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1235466262",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{template_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Archive_06_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive template with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"11223\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Archive_07_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive template for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Templates(s) to Archive\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{template_Id_02}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Templates",
					"item": [
						{
							"name": "Tem_Edit_01_Edit_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Edit template\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{template_Id_01}}\",\"name\":\"{{template_Ename}}\",\"subject\":\"{{template_Esubject}}\",\"description\":\"{{template_Edescription}}\",\"tags\":[\"{{template_Etag}}\"],\"trackViews\":true,\"type\":\"personal\",\"archive\":false}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Edit_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit template with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1212121212",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{template_Id_01}}\",\"name\":\"{{template_Ename}}\",\"subject\":\"{{template_Esubject}}\",\"description\":\"{{template_Edescription}}\",\"tags\":[\"{{template_Etag}}\"],\"trackViews\":true,\"type\":\"personal\",\"archive\":false}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Edit_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit template with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid ID or ID is not provided\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"12121\",\"name\":\"{{template_Ename}}\",\"subject\":\"{{template_Esubject}}\",\"description\":\"{{template_Edescription}}\",\"tags\":[\"{{template_Etag}}\"],\"trackViews\":true,\"type\":\"personal\",\"archive\":false}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Edit_04_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Edit template for miss match id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No Template found for the ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{template_Id_02}}\",\"name\":\"{{template_Ename}}\",\"subject\":\"{{template_Esubject}}\",\"description\":\"{{template_Edescription}}\",\"tags\":[\"{{template_Etag}}\"],\"trackViews\":true,\"type\":\"personal\",\"archive\":false}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Template",
					"item": [
						{
							"name": "Tem_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"template_Id_01\",jsonData.id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var temname = pm.globals.get(\"template_Name_01\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.name).to.include(temname);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Subject\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.subject).to.include(temsub);\r",
											"});\r",
											"\r",
											"var temsub = pm.globals.get(\"template_Description\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.description).to.include(temsub);\r",
											"});\r",
											"var temsub = pm.globals.get(\"template_Tag\");\r",
											"pm.test(\"Added a template successfully\", function () {\r",
											"    pm.expect(jsonData.tags).to.include(temsub);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{template_Name_01}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Delete__01_Delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Delete template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Template(s) Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{template_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Delete_Mul_02_DeleteContact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete multiple template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Template(s) Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{template_Id_03}}\",\"{{template_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Temp_Delete_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete template with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "35465465463543654",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{template_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Temp_Delete_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete template with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"12121\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Temp_Delete_05_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete template for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Templates(s) not exists\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{template_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upload_Template",
					"item": [
						{
							"name": "Temp_upload_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Upload template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"name\":\"{{template_Name_01}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true},{\"name\":\"{{template_Name_02}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/uploadcsv",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"uploadcsv"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tem_Get_All_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"var temname = pm.globals.get(\"template_Name_01\");\r",
											"pm.test(\"Get template\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(temname);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/template",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "Temp_upload_02_Empty_Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Upload template with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Type required\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"name\":\"\",\"subject\":\"\",\"description\":\"\",\"type\":\"\",\"tags\":\"\"},{\"name\":\"\",\"subject\":\"\",\"description\":\"\",\"type\":\"\",\"tags\":\"\"}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/uploadcsv",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"uploadcsv"
									]
								}
							},
							"response": []
						},
						{
							"name": "Temp_upload_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Upload template with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"name\":\"{{template_Name_01}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true},{\"name\":\"{{template_Name_02}}\",\"subject\":\"{{template_Subject}}\",\"description\":\"{{template_Description}}\",\"tags\":[\"{{template_Tag}}\"],\"type\":\"{{template_Type}}\",\"snippet\":\"{{snippet_Id_01}}\",\"trackViews\":true,\"trackClicks\":true}]\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/template/uploadcsv",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"uploadcsv"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Tags",
					"item": [
						{
							"name": "Get_All_Tags_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"var tag = pm.globals.get(\"template_Tag\");\r",
											"pm.test(\"Get template tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/template/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_All_Tags_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/template/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"template",
										"tags"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Task",
			"item": [
				{
					"name": "Save_Task",
					"item": [
						{
							"name": "Acc_Add_01_Happy_Path Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Id_01\",jsonData.id);\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var compname = pm.globals.get(\"account_Name_01\");\r",
											"pm.test(\"Account name\", function () {\r",
											"    pm.expect(jsonData.fullName).to.include(compname);\r",
											"});\r",
											"\r",
											"var compphno = pm.globals.get(\"account_Phone_Number_01\");\r",
											"pm.test(\"Account phone number\", function () {\r",
											"    pm.expect(jsonData.companyPhone).to.include(compphno);\r",
											"});\r",
											"\r",
											"var compweb = pm.globals.get(\"account_Web_01\");\r",
											"pm.test(\"Account website\", function () {\r",
											"    pm.expect(jsonData.website).to.include(compweb);\r",
											"});\r",
											"\r",
											"var compaddress = pm.globals.get(\"account_Address\");\r",
											"pm.test(\"Account address\", function () {\r",
											"    pm.expect(jsonData.address).to.include(compaddress);\r",
											"});\r",
											"\r",
											"var compcity = pm.globals.get(\"account_City\");\r",
											"pm.test(\"Account City\", function () {\r",
											"    pm.expect(jsonData.city).to.include(compcity);\r",
											"});\r",
											"\r",
											"var compcountry = pm.globals.get(\"account_Country\");\r",
											"pm.test(\"Account country\", function () {\r",
											"    pm.expect(jsonData.country).to.include(compcountry);\r",
											"});\r",
											"\r",
											"var compstate = pm.globals.get(\"account_State\");\r",
											"pm.test(\"Account state\", function () {\r",
											"    pm.expect(jsonData.state).to.include(compstate);\r",
											"});\r",
											"\r",
											"var compcode = pm.globals.get(\"account_Code\");\r",
											"pm.test(\"Account code\", function () {\r",
											"    pm.expect(jsonData.code).to.include(compcode);\r",
											"});\r",
											"var compLinked = pm.globals.get(\"account_Linkedin\");\r",
											"pm.test(\"Account linkedin\", function () {\r",
											"    pm.expect(jsonData.companyLinkedin).to.include(compLinked);\r",
											"});\r",
											"\r",
											"var compfacebook = pm.globals.get(\"account_Facebook\");\r",
											"pm.test(\"Account facebook\", function () {\r",
											"    pm.expect(jsonData.companyFacebook).to.include(compfacebook);\r",
											"});\r",
											"\r",
											"var comptwitter= pm.globals.get(\"account_Twitter\");\r",
											"pm.test(\"Account twitter\", function () {\r",
											"    pm.expect(jsonData.twitter).to.include(comptwitter);\r",
											"});\r",
											"\r",
											"var compindustry = pm.globals.get(\"account_Industry\");\r",
											"pm.test(\"Account industry\", function () {\r",
											"    pm.expect(jsonData.industry).to.include(compindustry);\r",
											"});\r",
											"\r",
											"var compabout = pm.globals.get(\"account_About\");\r",
											"pm.test(\"Account about\", function () {\r",
											"    pm.expect(jsonData.about).to.include(compabout);\r",
											"});\r",
											"\r",
											"var compnumOfEmps = pm.globals.get(\"account_No_Of_Employee\");\r",
											"pm.test(\"Account no of employee\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(compnumOfEmps);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');-\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Web_01\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\".com\";\r",
											"pm.globals.set(\"account_Web_01\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fullName\":\"{{account_Name_01}}\",\"companyPhone\":\"{{account_Phone_Number_01}}\",\"address\":\"{{account_Address}}\",\"city\":\"{{account_City}}\",\"country\":\"{{account_Country}}\",\"state\":\"{{account_State}}\",\"code\":\"{{account_Code}}\",\"companyLinkedin\":\"{{account_Linkedin}}\",\"companyFacebook\":\"{{account_Facebook}}\",\"twitter\":\"{{account_Twitter}}\",\"website\":\"{{account_Web_01}}\",\"industry\":\"{{account_Industry}}\",\"about\":\"{{account_About}}\",\"numOfEmps\":\"{{account_No_Of_Employee}}\",\"filePath\":\"\",\"owner\":\"{{user_Id_01}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_01\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_01\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact created successfully\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"company\":\"{{account_Id_01}}\",\"owner\":\"{{user_Id_01}}\",\"email\":\"{{contact_Email_01}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Get_All_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.globals.get(\"contact_Id_01\");\r",
											"\r",
											"var fName1 = pm.globals.get(\"contact_First_Name_01\");\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"const userIds = [];\r",
											"_.forEach(_.filter(jsonData.results, c => c.fName === fName1),\r",
											"  item => { userIds.push(item._id); });\r",
											"console.log(userIds);\r",
											"pm.globals.set(\"contact_Id_01\", userIds);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/contact?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"contact"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_01_Happy_Path_Note_Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"task_Id_01\",jsonData.id); \r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var fname = pm.globals.get(\"contact_First_Name_01\");\r",
											"pm.test(\"Add task successfully\", function () {\r",
											"    pm.expect(jsonData.contact).to.include(fname);\r",
											"});\r",
											"var uname = pm.globals.get(\"register_First_Name_01\");\r",
											"pm.test(\"Add task successfully\", function () {\r",
											"    pm.expect(jsonData.assignedUser).to.include(uname);\r",
											"});\r",
											"var id = pm.globals.get(\"contact_Id_01\");\r",
											"pm.test(\"Add task successfully\", function () {\r",
											"    pm.expect(jsonData.contactRef).to.include(id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Note_Type}}\",\"value\":0},\"option\":\"{{task_Note_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_02_Happy_Path_Call_Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"task_Id_03\",jsonData.id); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"callResult\":\"{{task_Call_Result}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Call_Type}}\",\"value\":1},\"option\":\"{{task_Call_Type}}\",\"value\":1}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_03_Happy_Path_Email_Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"task_Id_04\",jsonData.id); \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Email_Type}}\",\"value\":0},\"option\":\"{{task_Email_Type}}\",\"value\":0}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_04_Happy_Path_Linkedin_Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Linkedin_Type}}\",\"value\":0},\"option\":\"{{task_Linkedin_Type}}\",\"value\":0}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_05_Happy_Path_Whatsapp_Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Whatsapp_Type}}\",\"value\":0},\"option\":\"{{task_Whatsapp_Type}}\",\"value\":0}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_06_Happy_Path_Meeting_Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Meeting_Type}}\",\"value\":0},\"option\":\"{{task_Meeting_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_07_Happy_Path_Message_Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"taskid3\",jsonData.id);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Sms_Type}}\",\"value\":0},\"option\":\"{{task_Sms_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_08_Happy_Path_Twitter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"taskid4\",jsonData.id);\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Twitter_Type}}\",\"value\":0},\"option\":\"{{task_Twitter_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_11_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Add task with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "zI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MWQ",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Note_Type}}\",\"value\":0},\"option\":\"{{task_Note_Type}}\",\"value\":0}"
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_13_Empty_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add task with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Date is required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"id\":\"\",\"contact\":\"\",\"type\":\"Note\",\"value\":0},\"option\":\"Note\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Save_Task_14_Mismatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add task for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Contact Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_02}}\",\"label\":\"{{contact_First_Name_02}} {{contact_Last_Name_02}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_02}}\",\"label\":\"{{register_First_Name_02}} {{register_Last_Name_02}}\"},\"type\":\"{{task_Note_Type}}\",\"value\":0},\"option\":\"{{task_Note_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Tasks",
					"item": [
						{
							"name": "Tas_Get_All_Task_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var id = pm.globals.get(\"task_Id_01\");\r",
											"pm.test(\"Get task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Get_All_Task_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Get_All_Task_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Get task with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "3684365",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add_Task_Tag",
					"item": [
						{
							"name": "Tas_Add_Tag_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Add a tag for task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"{{task_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Add_Mul_Tag_03_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for multiple task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Created\");\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"{{task_Id_03}}\",\"{{task_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Add_Tag_04_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for task with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "3456789",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"{{task_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Add_Tag_05_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Add a tag for task with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"12121\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Add_Tag_06_Mismatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Add a tag for task of missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"{{task_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Add_Tag_07_Empty_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add a tag for task with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag cannot be empty\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"\",\"selected\":[\"{{task_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Task_Tag",
					"item": [
						{
							"name": "Tas_Get_Tag_03_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"var tag = pm.globals.get(\"task_Tag\");\r",
											"pm.test(\"Get tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{task_Id_01}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Get_Tag_07_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Get tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23235423523",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{task_Id_01}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Get_Tag_08_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Get tag with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"12121\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag/get",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag",
										"get"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_All_Tags",
					"item": [
						{
							"name": "Get_All_Tags_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"\r",
											"var tag = pm.globals.get(\"task_Tag\");\r",
											"pm.test(\"Get snippet tag\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(tag);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tags"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_All_Tags_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/tags",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tags"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove_Task_Tag",
					"item": [
						{
							"name": "Tas_Remove_Tag_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"{{task_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Remove_Mul_Tag_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove multiple tag successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Tag(s) Removed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"{{task_Id_03}}\",\"{{task_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Remove_Tag_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "23456789",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"{{task_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Remove_Tag_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Remove tag with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"1215\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Remove_Tag_05_Missmatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove tag for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"tag\":\"{{task_Tag}}\",\"selected\":[\"{{task_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/tag",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"tag"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Archive_Task",
					"item": [
						{
							"name": "Tas_Archive_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive task successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Task(s) Archived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{task_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/archive",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"archive"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Archive_Mul_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive multiple task successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Task(s) Archived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{task_Id_03}}\",\"archive\":false},{\"_id\":\"{{task_Id_04}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/archive",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"archive"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Archive_Already_03_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archiving the already archived task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1 Task(s) Unarchived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{task_Id_01}}\",\"archive\":true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/archive",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"archive"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Archive_Already_Mul_04_Archived",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Archiving the already archived multiple task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"2 Task(s) Unarchived\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{task_Id_03}}\",\"archive\":true},{\"_id\":\"{{task_Id_04}}\",\"archive\":true}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/archive",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"archive"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Archive_05_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive task with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "121212",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{task_Id_01}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/archive",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"archive"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Archive_06_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive task with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"1598624\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/archive",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"archive"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_Archive_07_Mismatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Archive task for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[{\"_id\":\"{{task_Id_02}}\",\"archive\":false}]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/archive",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"archive"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Task",
					"item": [
						{
							"name": "Tas_01_Delete_Task_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Delete task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Task(s) Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{task_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_02_Delete_Mul_Task_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete multiple task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Task(s) Deleted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{task_Id_03}}\",\"{{task_Id_04}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_03_Delete_invalid_access_token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete task with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "7899876",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{task_Id_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_04_Delete_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete task with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"12121\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_05_Delete_Mismatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete task for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":[\"{{task_Id_02}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Task",
					"item": [
						{
							"name": "Tas_Save_Task_01_Happy_Path_Note_Task Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"task_Id_01\",jsonData.id); \r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var fname = pm.globals.get(\"contact_First_Name_01\");\r",
											"pm.test(\"Add task successfully\", function () {\r",
											"    pm.expect(jsonData.contact).to.include(fname);\r",
											"});\r",
											"var uname = pm.globals.get(\"register_First_Name_01\");\r",
											"pm.test(\"Add task successfully\", function () {\r",
											"    pm.expect(jsonData.assignedUser).to.include(uname);\r",
											"});\r",
											"var id = pm.globals.get(\"contact_Id_01\");\r",
											"pm.test(\"Add task successfully\", function () {\r",
											"    pm.expect(jsonData.contactRef).to.include(id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_Description}}\",\"date\":\"{{task_Date}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Note_Type}}\",\"value\":0},\"option\":\"{{task_Note_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_01_Edit_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Edit task\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"{{task_Id_01}}\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_EDes}}\",\"date\":\"{{task_Edate}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Note_Type}}\",\"value\":0},\"option\":\"{{task_Note_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_03_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit task with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "234787",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"{{task_Id_01}}\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_EDes}}\",\"date\":\"{{task_Edate}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Note_Type}}\",\"value\":0},\"option\":\"{{task_Note_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_04_Edit_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Edit task with invalid id\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"1212\",\"contact\":{\"value\":\"{{contact_Id_01}}\",\"label\":\"{{contact_First_Name_01}} {{contact_Last_Name_01}}\"},\"description\":\"{{task_EDes}}\",\"date\":\"{{task_Edate}}\",\"assignedUser\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"type\":\"{{task_Note_Type}}\",\"value\":0},\"option\":\"{{task_Note_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"12121"
									]
								}
							},
							"response": []
						},
						{
							"name": "Tas_05_Edit_mismatch_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Edit task for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid ID or ID is not provided\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"formData\":{\"_id\":\"{{task_Id_02}}\",\"contact\":{\"value\":\"{{contact_Id_02}}\",\"label\":\"{{contact_First_Name_02}} {{contact_Last_Name_02}}\"},\"description\":\"{{task_Edes}}\",\"date\":\"{{task_Edate}}\",\"assignedUser\":{\"value\":\"{{user_Id_02}}\",\"label\":\"{{register_First_Name_02}} {{register_Last_Name_02}}\"},\"type\":\"{{task_Note_Type}}\",\"value\":0},\"option\":\"{{task_Note_Type}}\",\"value\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_02}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Complete_Task",
					"item": [
						{
							"name": "Complete_Task_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.completed).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_01}}/complete",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_01}}",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete_Task_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_01}}/complete",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_01}}",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete_Task_03_Invalid_Task_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/12121/complete",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"12121",
										"complete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Complete_Task_04_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_02}}/complete",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_02}}",
										"complete"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Skip_Task",
					"item": [
						{
							"name": "Skip_Task_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Skip Task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Task Updated\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{task_Id_01}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_01}}/skip",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_01}}",
										"skip"
									]
								}
							},
							"response": []
						},
						{
							"name": "Skip_Task_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{task_Id_01}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_01}}/skip",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_01}}",
										"skip"
									]
								}
							},
							"response": []
						},
						{
							"name": "Skip_Task_03_Invalid_Task_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"12121\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/12121/skip",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"12121",
										"skip"
									]
								}
							},
							"response": []
						},
						{
							"name": "Skip_Task_04_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\"{{task_Id_02}}\"]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_02}}/skip",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_02}}",
										"skip"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Notcomplete_Task",
					"item": [
						{
							"name": "Notcomplete_Task_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_01}}/notcomplete",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_01}}",
										"notcomplete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Notcomplete_Task_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_01}}/notcomplete",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_01}}",
										"notcomplete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Notcomplete_Task_03_Invalid_Task_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/12121/notcomplete",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"12121",
										"notcomplete"
									]
								}
							},
							"response": []
						},
						{
							"name": "Notcomplete_Task_04_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/tasks/{{task_Id_02}}/notcomplete",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"tasks",
										"{{task_Id_02}}",
										"notcomplete"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Get_Notification",
					"item": [
						{
							"name": "Gn_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Notifications fetched successfully\");\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"notification_Id_01\",jsonData.data.results[0]._id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gn_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Readone_Notification",
					"item": [
						{
							"name": "Markoneread_01_Happypath Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Notification marked as read successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"id\": \"{{notification_Id_01}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Markoneread_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"id\": \"{{notification_Id_01}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Markoneread_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n     \"id\": \"12121\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Readall_Notification",
					"item": [
						{
							"name": "Markallread_01_Happypath",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Notification marked as read successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Markallread_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/notifications",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Notification",
					"item": [
						{
							"name": "Dn_01_Happypath Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Notification deleted successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/notifications/{{notification_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications",
										"{{notification_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dn_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/notifications/{{notification_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications",
										"{{notification_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dn_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid  ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/notifications/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"notifications",
										"12121"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Filter_Contact",
			"item": [
				{
					"name": "Create_filter_Contact Copy",
					"item": [
						{
							"name": "Con_Fil_01_Happy_Path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Name\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"Filter\";\r",
											"pm.globals.set(\"contact_Filter_Name\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"contact_Filter_Id\", jsonData.data.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{contact_Filter_Name}}\",\"sharing\":\"{{contact_Sharing}}\",\"contact_type\":[{\"value\":\"{{contact_Type}}\",\"label\":\"{{contact_Type}}\"}],\"contact_sortBy\":\"{{contact_Sortby}}\",\"contact_sortOrder\":true,\"contact_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"contact\",\"contact_tags\":[\"{{contact_Tag}}\"],\"contact_company\":{\"value\":\"{{account_Id_01}}\",\"label\":\"{{account_Web_01}}\"},\"contact_title\":\"{{contact_Title}}\",\"contact_stage\":[{\"value\":\"{{contact_Stage}}\",\"label\":\"{{contact_Stage}}\"}],\"contact_city\":\"{{contact_City}}\",\"contact_state\":\"{{contact_State}}\",\"contact_country\":\"{{contact_Country}}\"} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Fil_02_Access_Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Name\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"Filter\";\r",
											"pm.globals.set(\"contact_Filter_Name\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Contact filter with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12598455",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{contact_Filter_Name}}\",\"sharing\":\"{{contact_Sharing}}\",\"contact_type\":[{\"value\":\"{{contact_Type}}\",\"label\":\"{{contact_Type}}\"}],\"contact_sortBy\":\"{{contact_Sortby}}\",\"contact_sortOrder\":true,\"contact_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"contact\",\"contact_tags\":[\"{{contact_Tag}}\"],\"contact_company\":{\"value\":\"{{account_Id_01}}\",\"label\":\"{{account_Web_01}}\"},\"contact_title\":\"Title\",\"contact_stage\":[{\"value\":\"{{contact_Stage}}\",\"label\":\"{{contact_Stage}}\"}],\"contact_city\":\"{{contact_City}}\",\"contact_state\":\"{{contact_State}}\",\"contact_country\":\"{{contact_Country}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Con_Fil_03_Empty_Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Name\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"Filter\";\r",
											"pm.globals.set(\"contact_Filter_Name\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Contact filter with empty field\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter name is required!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"\",\"sharing\":\"\",\"contact_type\":[{\"value\":\"\",\"label\":\"\"}],\"contact_sortBy\":\"\",\"contact_sortOrder\":true,\"contact_userRef\":{\"value\":\"\",\"label\":\"\"},\"filterType\":\"\",\"contact_tags\":[\"\"],\"contact_company\":{\"value\":\"\",\"label\":\"\"},\"contact_title\":\"Title\",\"contact_stage\":[{\"value\":\"\",\"label\":\"\"}],\"contact_city\":\"\",\"contact_state\":\"\",\"contact_country\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Contact_Filter",
					"item": [
						{
							"name": "Gcf_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var id = pm.globals.get(\"contact_Filter_Id\");\r",
											"pm.test(\"Filter\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gcf_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Contact filter with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"contact"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Contact_Filter",
					"item": [
						{
							"name": "Ecf_01_Happy_Path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"contact_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter updated successfully!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{contact_Filter_Ename}}\",\"sharing\":\"{{contact_Sharing}}\",\"contact_type\":[{\"value\":\"{{contact_Type}}\",\"label\":\"{{contact_Type}}\"}],\"contact_sortBy\":\"{{contact_Sortby}}\",\"contact_sortOrder\":true,\"contact_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"contact\",\"contact_tags\":[\"{{contact_Tag}}\"],\"contact_company\":{\"value\":\"{{account_Id_01}}\",\"label\":\"{{account_Web_01}}\"},\"contact_title\":\"{{contact_Title}}\",\"contact_stage\":[{\"value\":\"{{contact_Stage}}\",\"label\":\"{{contact_Stage}}\"}],\"contact_city\":\"{{contact_City}}\",\"contact_state\":\"{{contact_State}}\",\"contact_country\":\"{{contact_Country}}\"} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/{{contact_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{contact_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ecf_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"contact_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Contact filter with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{contact_Filter_Ename}}\",\"sharing\":\"{{contact_Sharing}}\",\"contact_type\":[{\"value\":\"{{contact_Type}}\",\"label\":\"{{contact_Type}}\"}],\"contact_sortBy\":\"{{contact_Sortby}}\",\"contact_sortOrder\":true,\"contact_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"contact\",\"contact_tags\":[\"{{contact_Tag}}\"],\"contact_company\":{\"value\":\"{{account_Id_01}}\",\"label\":\"{{account_Web_01}}\"},\"contact_title\":\"{{contact_Title}}\",\"contact_stage\":[{\"value\":\"{{contact_Stage}}\",\"label\":\"{{contact_Stage}}\"}],\"contact_city\":\"{{contact_City}}\",\"contact_state\":\"{{contact_State}}\",\"contact_country\":\"{{contact_Country}}\"} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/{{contact_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{contact_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ecf_03_Empty_Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"contact_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Contact filter with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Name is Required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"\",\"sharing\":\"\",\"contact_type\":[{\"value\":\"\",\"label\":\"\"}],\"contact_sortBy\":\"\",\"contact_sortOrder\":true,\"contact_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"contact\",\"contact_tags\":[\"\"],\"contact_company\":{\"value\":\"{{account_Id_01}}\",\"label\":\"{{account_Web_01}}\"},\"contact_title\":\"\",\"contact_stage\":[{\"value\":\"\",\"label\":\"\"}],\"contact_city\":\"\",\"contact_state\":\"\",\"contact_country\":\"\"} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/{{contact_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{contact_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Ecf_04_Invalid_Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"contact_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{contact_Filter_Ename}}\",\"sharing\":\"{{contact_Sharing}}\",\"contact_type\":[{\"value\":\"{{contact_Type}}\",\"label\":\"{{contact_Type}}\"}],\"contact_sortBy\":\"{{contact_Sortby}}\",\"contact_sortOrder\":true,\"contact_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"contact\",\"contact_tags\":[\"{{contact_Tag}}\"],\"contact_company\":{\"value\":\"{{account_Id_01}}\",\"label\":\"{{account_Web_01}}\"},\"contact_title\":\"{{contact_Title}}\",\"contact_stage\":[{\"value\":\"{{contact_Stage}}\",\"label\":\"{{contact_Stage}}\"}],\"contact_city\":\"{{contact_City}}\",\"contact_state\":\"{{contact_State}}\",\"contact_country\":\"{{contact_Country}}\"} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"12121"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Contact_Filter",
					"item": [
						{
							"name": "Dcf_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter deleted successfully!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/{{contact_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{contact_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dcf_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "121211",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/{{contact_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{contact_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dcf_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/12212",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"12212"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Filter_Task",
			"item": [
				{
					"name": "Create_filter_Task",
					"item": [
						{
							"name": "Task_Fil_01_Happy_Path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"task_Filter_Name\");\r",
											"var Repositoryname =pm.variables.replaceIn('task{{currentdate}}')+\"Filter\";\r",
											"pm.globals.set(\"task_Filter_Name\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"task_Filter_Id\", jsonData.data.id);\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter created successfully!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{task_Filter_Name}}\",\"sharing\":\"{{task_Sharing}}\",\"task_type\":[\"{{task_Note_Type}}\"],\"task_date\":[\"{{task_Date}}\",\"{{task_Edate}}\"],\"task_status\":[{\"value\":\"{{task_Status}}\",\"label\":\"{{task_Status}}\"}],\"task_created\":[{\"value\":\"\",\"label\":\"\"}],\"task_sortOrder\":true,\"task_sortBy\":\"Date\",\"task_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"{{task_Filter_Type}}\",\"task_tags\":[\"{{task_Tag}}\"],\"task_sequence\":\"{{sequences_Name}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Task_Fil_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"task_Filter_Name\");\r",
											"var Repositoryname =pm.variables.replaceIn('task{{currentdate}}')+\"Filter\";\r",
											"pm.globals.set(\"task_Filter_Name\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Contact filter with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{task_Filter_Name}}\",\"sharing\":\"{{task_Sharing}}\",\"task_type\":[\"{{task_Note_Type}}\"],\"task_date\":[\"{{task_Date}}\",\"{{task_Edate}}\"],\"task_status\":[{\"value\":\"{{task_Status}}\",\"label\":\"{{task_Status}}\"}],\"task_created\":[{\"value\":\"\",\"label\":\"\"}],\"task_sortOrder\":true,\"task_sortBy\":\"Date\",\"task_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"{{task_Filter_Type}}\",\"task_tags\":[\"{{task_Tag}}\"],\"task_sequence\":\"{{sequences_Name}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Task_Fil_03_Empty_Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Contact filter with empty field\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter name is required!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"\",\"sharing\":\"\",\"contact_type\":[{\"value\":\"\",\"label\":\"\"}],\"contact_sortBy\":\"\",\"contact_sortOrder\":true,\"contact_userRef\":{\"value\":\"\",\"label\":\"\"},\"filterType\":\"\",\"contact_tags\":[\"\"],\"contact_company\":{\"value\":\"\",\"label\":\"\"},\"contact_title\":\"Title\",\"contact_stage\":[{\"value\":\"\",\"label\":\"\"}],\"contact_city\":\"\",\"contact_state\":\"\",\"contact_country\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Task_Filter",
					"item": [
						{
							"name": "Gtf_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var id = pm.globals.get(\"task_Filter_Id\");\r",
											"pm.test(\"Filter\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gtf_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/tasks",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Task_Filter",
					"item": [
						{
							"name": "Etf_01_Happy_Path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"task_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"task_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter updated successfully!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{task_Filter_Ename}}\",\"sharing\":\"{{task_Sharing}}\",\"task_type\":[\"{{task_Note_Type}}\"],\"task_date\":[\"{{task_Date}}\",\"{{task_Edate}}\"],\"task_status\":[{\"value\":\"{{task_Status}}\",\"label\":\"{{task_Status}}\"}],\"task_created\":[{\"value\":\"\",\"label\":\"\"}],\"task_sortOrder\":true,\"task_sortBy\":\"Date\",\"task_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"{{task_Filter_Type}}\",\"task_tags\":[\"{{task_Tag}}\"],\"task_sequence\":\"{{sequences_Name}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/{{task_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{task_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Etf_02_Invalid_Access_token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"task_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"task_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{task_Filter_Ename}}\",\"sharing\":\"{{task_Sharing}}\",\"task_type\":[\"{{task_Note_Type}}\"],\"task_date\":[\"{{task_Date}}\",\"{{task_Edate}}\"],\"task_status\":[{\"value\":\"{{task_Status}}\",\"label\":\"{{task_Status}}\"}],\"task_created\":[{\"value\":\"\",\"label\":\"\"}],\"task_sortOrder\":true,\"task_sortBy\":\"Date\",\"task_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"{{task_Filter_Type}}\",\"task_tags\":[\"{{task_Tag}}\"],\"task_sequence\":\"{{sequences_Name}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/{{task_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{task_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Etf_03_Invalid_Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"task_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"task_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{task_Filter_Ename}}\",\"sharing\":\"{{task_Sharing}}\",\"task_type\":[\"{{task_Note_Type}}\"],\"task_date\":[\"{{task_Date}}\",\"{{task_Edate}}\"],\"task_status\":[{\"value\":\"{{task_Status}}\",\"label\":\"{{task_Status}}\"}],\"task_created\":[{\"value\":\"\",\"label\":\"\"}],\"task_sortOrder\":true,\"task_sortBy\":\"Date\",\"task_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"{{task_Filter_Type}}\",\"task_tags\":[\"{{task_Tag}}\"],\"task_sequence\":\"{{sequences_Name}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"12121"
									]
								}
							},
							"response": []
						},
						{
							"name": "Etf_04_Empty_Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"task_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"task_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Name is Required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"\",\"sharing\":\"\",\"task_type\":[\"\"],\"task_date\":[\"\",\"\"],\"task_status\":[{\"value\":\"\",\"label\":\"\"}],\"task_created\":[{\"value\":\"\",\"label\":\"\"}],\"task_sortOrder\":true,\"task_sortBy\":\"Date\",\"task_userRef\":{\"value\":\"{{user_Id_01}}\",\"label\":\"{{register_First_Name_01}} {{register_Last_Name_01}}\"},\"filterType\":\"\",\"task_tags\":[\"\"],\"task_sequence\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/{{task_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{task_Filter_Id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Task_Filter",
					"item": [
						{
							"name": "Dtf_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter deleted successfully!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/{{task_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{task_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dtf_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/{{task_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{task_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dtf_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"12121"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Filter_Account",
			"item": [
				{
					"name": "Create_filter_Account",
					"item": [
						{
							"name": "Acc_Fil_01_Happy_Path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Name\");\r",
											"var Repositoryname =pm.variables.replaceIn('account{{currentdate}}')+\"Filter\";\r",
											"pm.globals.set(\"contact_Filter_Name\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"account_Filter_Id\", jsonData.data.id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{contact_Filter_Name}}\",\"sharing\":\"{{account_Sharing}}\",\"company_sortBy\":\"{{account_Sortby}}\",\"company_sortOrder\":true,\"company_userRef\":\"{{account_Id_01}}\",\"filterType\":\"{{account_Filter_Type}}\",\"company_tags\":[\"{{account_Tag}}\"],\"company_state\":\"{{account_State}}\",\"company_country\":\"{{account_Country}}\",\"company_noOfEmps\":[\"{{account_Initialvalue}}\",\"{{account_Finalvalue}}\"],\"company_industry\":\"{{account_Industry}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Fil_02_Access_Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Name\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"Filter\";\r",
											"pm.globals.set(\"contact_Filter_Name\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Contact filter with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12598455",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{contact_Filter_Name}}\",\"sharing\":\"{{account_Sharing}}\",\"company_sortBy\":\"{{account_Sortby}}\",\"company_sortOrder\":true,\"company_userRef\":\"{{account_Id_01}}\",\"filterType\":\"{{account_Filter_Type}}\",\"company_tags\":[\"{{account_Tag}}\"],\"company_state\":\"{{account_State}}\",\"company_country\":\"{{account_Country}}\",\"company_noOfEmps\":[\"{{account_Initialvalue}}\",\"{{account_Finalvalue}}\"],\"company_industry\":\"{{account_Industry}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Acc_Fil_03_Empty_Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_Filter_Name\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"Filter\";\r",
											"pm.globals.set(\"contact_Filter_Name\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Contact filter with empty field\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter name is required!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"\",\"sharing\":\"\",\"company_sortBy\":\"\",\"company_sortOrder\":true,\"company_userRef\":\"\",\"filterType\":\"\",\"company_tags\":[\"\"],\"company_state\":\"\",\"company_country\":\"\",\"company_noOfEmps\":[\"\",\"\"],\"company_industry\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Account_Filter",
					"item": [
						{
							"name": "Gaf_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var id = pm.globals.get(\"account_Filter_Id\");\r",
											"pm.test(\"Filter\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"company"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gaf_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/company",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"company"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Account_Filter",
					"item": [
						{
							"name": "Eaf_01_Happy_Path",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"account_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter updated successfully!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{account_Filter_Ename}}\",\"sharing\":\"{{account_Sharing}}\",\"company_sortBy\":\"{{account_Sortby}}\",\"company_sortOrder\":true,\"company_userRef\":\"{{account_Id_01}}\",\"filterType\":\"{{account_Filter_Type}}\",\"company_tags\":[\"{{account_Tag}}\"],\"company_state\":\"{{account_State}}\",\"company_country\":\"{{account_Country}}\",\"company_noOfEmps\":[\"{{account_Initialvalue}}\",\"{{account_Finalvalue}}\"],\"company_industry\":\"{{account_Industry}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/{{account_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{account_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eaf_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"account_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{account_Filter_Ename}}\",\"sharing\":\"{{account_Sharing}}\",\"company_sortBy\":\"{{account_Sortby}}\",\"company_sortOrder\":true,\"company_userRef\":\"{{account_Id_01}}\",\"filterType\":\"{{account_Filter_Type}}\",\"company_tags\":[\"{{account_Tag}}\"],\"company_state\":\"{{account_State}}\",\"company_country\":\"{{account_Country}}\",\"company_noOfEmps\":[\"{{account_Initialvalue}}\",\"{{account_Finalvalue}}\"],\"company_industry\":\"{{account_Industry}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/{{account_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{account_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eaf_03_Invalid_Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"account_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"{{account_Filter_Ename}}\",\"sharing\":\"{{account_Sharing}}\",\"company_sortBy\":\"{{account_Sortby}}\",\"company_sortOrder\":true,\"company_userRef\":\"{{account_Id_01}}\",\"filterType\":\"{{account_Filter_Type}}\",\"company_tags\":[\"{{account_Tag}}\"],\"company_state\":\"{{account_State}}\",\"company_country\":\"{{account_Country}}\",\"company_noOfEmps\":[\"{{account_Initialvalue}}\",\"{{account_Finalvalue}}\"],\"company_industry\":\"{{account_Industry}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"12121"
									]
								}
							},
							"response": []
						},
						{
							"name": "Eaf_04_Empty_Data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"account_Filter_Ename\");\r",
											"var Repositoryname =pm.variables.replaceIn('con{{currentdate}}')+\"EFilter\";\r",
											"pm.globals.set(\"account_Filter_Ename\",Repositoryname);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Name is Required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"filterName\":\"\",\"sharing\":\"\",\"company_sortBy\":\"\",\"company_sortOrder\":true,\"company_userRef\":\"\",\"filterType\":\"\",\"company_tags\":[\"\"],\"company_state\":\"\",\"company_country\":\"\",\"company_noOfEmps\":[\"\"],\"company_industry\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/filter/{{account_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{account_Filter_Id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Contact_Filter",
					"item": [
						{
							"name": "Dcf_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Filter deleted successfully!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/{{account_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{account_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dcf_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/{{account_Filter_Id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"{{account_Filter_Id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dcf_03_invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/filter/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"filter",
										"12121"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Sequences",
			"item": [
				{
					"name": "Add_Sequences",
					"item": [
						{
							"name": "Sequences_Add_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"sequences_Id_01\", jsonData.data);\r",
											"\r",
											"pm.test(\"Create sequences successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Sequence has been created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{sequences_Name}}\",\"isActive\":false,\"sequenceType\":\"{{sequences_Type}}\",\"stepType\":\"{{sequences_Step_Email}}\",\"stepKind\":\"Auto\",\"onDay\":1,\"touchType\":\"Reply\",\"emailSub\":\"{{sequences_Email_Subject}}\",\"emailBody\":\"<p>{{sequences_Email_Body}}</p>\",\"emailAttachments\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_Add_02_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"sequences_Id_02\", jsonData.data);\r",
											"\r",
											"pm.test(\"Create sequences successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Sequence has been created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{sequences_Name}}\",\"isActive\":false,\"sequenceType\":\"{{sequences_Type}}\",\"stepType\":\"{{sequences_Step_Email}}\",\"stepKind\":\"Auto\",\"onDay\":1,\"touchType\":\"Reply\",\"emailSub\":\"{{sequences_Email_Subject}}\",\"emailBody\":\"<p>{{sequences_Email_Body}}</p>\",\"emailAttachments\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_Add_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Create sequences with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{sequences_Name}}\",\"isActive\":false,\"sequenceType\":\"{{sequences_Type}}\",\"stepType\":\"{{sequences_Step_Email}}\",\"stepKind\":\"Auto\",\"onDay\":1,\"touchType\":\"Reply\",\"emailSub\":\"{{sequences_Email_Subject}}\",\"emailBody\":\"<p>{{sequences_Email_Body}}</p>\",\"emailAttachments\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_Add_03_Invalid_Step_Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Create sequences with invalid step type\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid stepType\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{sequences_Name}}\",\"isActive\":false,\"sequenceType\":\"{{sequences_Type}}\",\"stepType\":\"instagram\",\"stepKind\":\"Auto\",\"onDay\":1,\"touchType\":\"Reply\",\"emailSub\":\"{{sequences_Email_Subject}}\",\"emailBody\":\"<p>{{sequences_Email_Body}}</p>\",\"emailAttachments\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_Add_04_Empty_Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"pm.test(\"Create sequences with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"stepType is required\");\r",
											"});\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"\",\"isActive\":false,\"stepType\":\"\",\"sequenceType\":\"\",\"stepKind\":\"\",\"onDay\":\"\",\"touchType\":\"\",\"emailSub\":\"\",\"emailBody\":\"\",\"emailAttachments\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Sequences",
					"item": [
						{
							"name": "Sequences_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var id = pm.globals.get(\"sequences_Id_01\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Get sequences with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12123123",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_Get_All_03_Pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences?limit=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences"
									],
									"query": [
										{
											"key": "limit",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add_steps",
					"item": [
						{
							"name": "Sequences_01_Add_Steps_Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"sequences_Step_Id_01\", jsonData.data[0]._id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_02_Add_Step_Call_Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"sequences_Step_Id_02\", jsonData.data._id);\r",
											"\r",
											"pm.test(\"Add step call task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Step has been added\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Call}}\",\"description\":\"{{sequences_Description}}\",\"onDay\":3}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_03_Add_Step_Linkedein",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Add step linkedin\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Step has been added\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Linkedin}}\",\"touchType\":\"Message\",\"description\":\"{{sequences_Description}}\",\"onDay\":\"4\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_04_Add_Step_SMS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Add step sms\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Step has been added\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Sms}}\",\"stepKind\":\"Auto\",\"description\":\"{{sequences_Description}}\",\"onDay\":\"5\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_05_Add_Step_Twitter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Add step twitter\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Step has been added\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Twitter}}\",\"touchType\":\"Follow\",\"description\":\"{{sequences_Description}}\",\"onDay\":7}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_06_Add_Step_Whatspp",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Add step whatsapp\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Step has been added\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Whatsapp}}\",\"description\":\"{{sequences_Description}}\",\"onDay\":9}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_07_Add_Step_Meeting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Add step meeting\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Step has been added\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Meeting}}\",\"description\":\"{{sequences_Description}}\",\"onDay\":11}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_08_Add_Step_Empty_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add step empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"stepType is required\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"\",\"description\":\"\",\"onDay\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_09_Add_Step_Empty_Step_Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add step with empty step type\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"stepType is required\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"\",\"description\":\"{{sequences_Description}}\",\"onDay\":3}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_10_Add_Step_Empty_On_Day",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add step with empty onday\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"onDay is required\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Call}}\",\"description\":\"{{sequences_Description}}\",\"onDay\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_11_Add_Step_Invalid_On_Day",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Add step with invalid onday\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"onDay should be in digits\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Call}}\",\"description\":\"{{sequences_Description}}\",\"onDay\":\"text\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_12_Add_Step_Empty_Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Add step with empty description\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Step has been added\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Twitter}}\",\"description\":\"\",\"onDay\":2}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_13_Add_Step_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Add step with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "121212",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Call}}\",\"description\":\"{{sequences_Description}}\",\"onDay\":\"6\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Steps",
					"item": [
						{
							"name": "Get_Steps_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var call = pm.globals.get(\"sequences_Step_Call\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(call);\r",
											"});\r",
											"var Linkedin = pm.globals.get(\"sequences_Step_Linkedin\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(Linkedin);\r",
											"});\r",
											"var meeting = pm.globals.get(\"sequences_Step_Meeting\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(meeting);\r",
											"});\r",
											"var twitter = pm.globals.get(\"sequences_Step_Twitter\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(twitter);\r",
											"});\r",
											"var whatsapp = pm.globals.get(\"sequences_Step_Whatsapp\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(whatsapp);\r",
											"});\r",
											"var sms = pm.globals.get(\"sequences_Step_Sms\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(sms);\r",
											"});\r",
											"var meeting = pm.globals.get(\"sequences_Step_Meeting\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(meeting);\r",
											"});\r",
											"var email = pm.globals.get(\"sequences_Step_Email\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(email);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Steps_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Steps_03_Invalid_Step_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequence id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/12121/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"12121",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Steps_04_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Id not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_02}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_02}}",
										"steps"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Activate",
					"item": [
						{
							"name": "Sequences_01_Activate_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Activate sequences successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence Activated successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_02_Activate_Missmatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Activate sequences with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have permissions to update this sequence\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_03_Activate_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Activate sequences with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequence id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/12121/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"12121",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_04_Activate_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Activate with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"activate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deactivate",
					"item": [
						{
							"name": "Sequences_01_Deactivate_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Deactivate successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence Deactivated successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_02_Deactivate_Missmatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"pm.test(\"Deactivate for missmatch id \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have permissions to update this sequence\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_03_Deactivate_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Deactivate sequences with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequence id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/12121/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"12121",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_04_Deactivate_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Deactivate with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/activate",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"activate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Assign_Contact",
					"item": [
						{
							"name": "Sequences_Add_01_Happy_Path Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"sequences_Id_01\", jsonData.data);\r",
											"\r",
											"pm.test(\"Create sequences successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Sequence has been created\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{sequences_Name}}\",\"isActive\":false,\"sequenceType\":\"{{sequences_Type}}\",\"stepType\":\"{{sequences_Step_Email}}\",\"stepKind\":\"Auto\",\"onDay\":1,\"touchType\":\"Reply\",\"emailSub\":\"{{sequences_Email_Subject}}\",\"emailBody\":\"<p>{{sequences_Email_Body}}</p>\",\"emailAttachments\":[]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_02_Add_Step_Call_Task Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"sequences_Step_Id_02\", jsonData.data._id);\r",
											"\r",
											"pm.test(\"Add step call task\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New Step has been added\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"stepType\":\"{{sequences_Step_Call}}\",\"description\":\"{{sequences_Description}}\",\"onDay\":3}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/steps",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"steps"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_01_AC_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Assign contacts to sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"New contact has been added\");\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.globals.set(\"sequences_Assign_Contact_01\", jsonData.data._id);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contactId\":\"{{contact_Id_01}}\",\"stepId\":\"{{sequences_Step_Id_02}}\"}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_02_AC_Already_Active_In_Sequences",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Assigning a contacts which is already active in sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Contact already added to this sequence\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contactId\":\"{{contact_Id_01}}\",\"stepId\":\"{{sequences_Step_Id_02}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_03_AC_Invalid_Sequence Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Assign a contact with invalid sequences id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequence id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contactId\":\"{{contact_Id_01}}\",\"stepId\":\"{{sequences_Step_Id_02}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/112233/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"112233",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_04_AC_Invalid_Acces_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Assign contact with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1122334455",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contactId\":\"{{contactid1}}\",\"stepId\":\"{{Stepsid2}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_05_AC_Invalid_Contact_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Assign contact with invalid contact id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid contactId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contactId\":\"123123\",\"stepId\":\"{{sequences_Step_Id_02}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_06_AC_Invalid_Step_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Assign contact with invalid step id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid stepId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contactId\":\"{{contact_Id_01}}\",\"stepId\":\"123456\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_07_AC_Missmatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Assign contact for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have permission to access this sequence\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contactId\":\"{{contact_Id_01}}\",\"stepId\":\"{{sequences_Step_Id_02}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Contact",
					"item": [
						{
							"name": "Get_Contact_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var id = pm.globals.get(\"contact_First_Name_01\");\r",
											"pm.test(\"Get contact\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(id);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Contact_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "22121",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get_Contact_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequence id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/12345/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"12345",
										"contacts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remove_Contact",
					"item": [
						{
							"name": "Seq_01_RC_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence contact(s) has been removed successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"sequenceContacts\":[\"{{sequences_Assign_Contact_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_03_RC_Invalid_Sequence Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove contact with invalid sequences id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequence id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"sequenceContacts\":[\"{{sequences_Assign_Contact_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/112233/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"112233",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_04_RC_Invalid_Acces_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove contact with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "1122334455",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"sequenceContacts\":[\"{{sequences_Assign_Contact_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_05_RC_Invalid_Contact_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove contact with invalid contact id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequenceContact _id(s)\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"sequenceContacts\":[\"64658\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_06_RC_Missmatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Remove contact successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have permission to access this sequence\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"sequenceContacts\":[\"{{sequences_Assign_Contact_01}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upload_Contacts",
					"item": [
						{
							"name": "Seq_UC_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Upload contacts successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_01\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_01\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contacts\":[{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"email\":\"{{contact_Email_01}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts/bulk",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_UC_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Upload with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"fName1\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"fName1\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"fName2\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"fName2\",repositoryName);\r",
											"\r",
											"\r",
											"pm.globals.get(\"email01\");\r",
											"var repositoryy =\"chin\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"email01\",repositoryy);\r",
											"\r",
											"\r",
											"pm.globals.get(\"email02\");\r",
											"var repositoryy =\"chin\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"email02\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contacts\":[{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"email\":\"{{contact_Email_01}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts/bulk",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_UC_03_Already_Added_Contact",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"var fName = pm.globals.get(\"fName1\");\r",
											"\r",
											"pm.test(\"Uploading the already added contact\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.skipped).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contacts\":[{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"email\":\"{{contact_Email_01}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts/bulk",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_UC_04_Invald_Email_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.skipped).to.eql(1);\r",
											"});;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var moment = require('moment');\r",
											"pm.environment.set('currentdate', moment().format((\"YYYYMMDDHHMMSS\")));\r",
											"\r",
											"pm.globals.get(\"contact_First_Name_01\");\r",
											"var repositoryName ='tom'+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_First_Name_01\",repositoryName);\r",
											"\r",
											"pm.globals.get(\"contact_Last_Name_01\");\r",
											"var repositoryname =\"jerry\"+ pm.variables.replaceIn('{{currentdate}}');\r",
											"pm.globals.set(\"contact_Last_Name_01\",repositoryname);\r",
											"\r",
											"pm.globals.get(\"contact_Email_01\");\r",
											"var repositoryy =\"jerry\"+ pm.variables.replaceIn('{{$randomEmail}}');\r",
											"pm.globals.set(\"contact_Email_01\",repositoryy);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"contacts\":[{\"fName\":\"{{contact_First_Name_01}}\",\"lName\":\"{{contact_Last_Name_01}}\",\"email\":\"{{contact_First_Name_01}}\",\"emailType\":\"\",\"title\":\"{{contact_Title}}\",\"phone\":\"{{contact_Phone}}\",\"extn\":\"\",\"phoneType\":\"\",\"stage\":\"{{contact_Stage}}\",\"street\":\"{{contact_Street}}\",\"city\":\"{{contact_City}}\",\"state\":\"{{contact_State}}\",\"country\":\"{{contact_Country}}\",\"code\":\"{{contact_Code}}\",\"linkedin\":\"{{contact_Linkedin}}\",\"facebook\":\"{{contact_Facebook}}\",\"timezone\":\"{{contact_Timezone}}\",\"tags\":[\"{{contact_Tag}}\"],\"type\":\"{{contact_Type}}\",\"twitter\":\"{{contact_Twitter}}\"}]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/contacts/bulk",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"contacts",
										"bulk"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Sequences",
					"item": [
						{
							"name": "Sequences_01_Edit_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Edit sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence updated successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{sequences_Edit_Name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/name",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_02_Edit_Invalid_AccessToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit sequences with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "112233",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{sequences_Edit_Name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/name",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_03_Edit_Empty_Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit sequences for empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"name should be atleast 1 char long\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/name",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_04_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Edit sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequence id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{sequences_Edit_Name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/12125/name",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"12125",
										"name"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_05_Edit_Missmatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Edit sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have permissions to update this sequence\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{sequences_Edit_Name}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/name",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"name"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Settings",
					"item": [
						{
							"name": "Sequences_01_Settings_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Get sequences settings\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"true\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_02_Settings_MissMatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No sequence with that id found!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_03_Settings_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequence id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/12121/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"12121",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_04_Settings_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Get settings with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12123",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"settings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Step",
					"item": [
						{
							"name": "Sequences_Delete_02_Step_Happy_path_Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete step successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Step has been deleted successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Step_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Step_Id_02}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_Delete_03_Step_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete step with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid step id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/steps/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"12121"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_Delete_04_Step_Missmatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete step for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have permissions to delete this step\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Step_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Step_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_Delete_05_Step_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete step with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Id_01}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete_Sequences",
					"item": [
						{
							"name": "Seq_01_Delete_Seq_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete sequences successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence deleted successfully!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_02_Delete_Seq_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete sequences with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12123",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_03_Delete_Seq_Invalid_Seq_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete sequences with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Sequences id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/123123",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"123123"
									]
								}
							},
							"response": []
						},
						{
							"name": "Seq_04_Delete_Seq_Missmatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Delete sequences for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence not found!\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Clone_Sequences",
					"item": [
						{
							"name": "Clone_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var type = pm.globals.get(\"sequences_Type\");\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.sequenceType).to.eql(type);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"SEQUENCE_CREATED\");\r",
											"});\r",
											"var type = pm.globals.get(\"sequences_Name\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"SEQUENCE_CREATED\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":\"{{sequences_Id_01}}\",\"cloneTo\":\"{{sequences_Type}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/cloneSequence",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"cloneSequence"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clone_02_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":\"{{sequences_Id_01}}\",\"cloneTo\":\"{{sequences_Type}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/cloneSequence",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"cloneSequence"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clone_03_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"id\":\"121214\",\"cloneTo\":\"{{sequences_Type}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/cloneSequence",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"cloneSequence"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Edit_Step",
					"item": [
						{
							"name": "Sequences_01_Edit_Step_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit step successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Step has been updated successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{sequences_Step_Id_02}}\",\"stepType\":\"{{sequences_Step_Call}}\",\"stepKind\":\"Manual\",\"onDay\":\"4\",\"description\":\"{{sequences_Edit_Description}}\",\"touchType\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Step_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Step_Id_02}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_02_Edit_Step_Invalid_Onday",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit step with invalid onday\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"onDay should be in digits\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{sequences_Step_Id_02}}\",\"stepType\":\"{{sequences_Step_Call}}\",\"stepKind\":\"Manual\",\"onDay\":\"four\",\"description\":\"{{sequences_Edit_Description}}\",\"touchType\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Step_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Step_Id_02}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_03_Edit_Step_Empty_Onday",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit step with empty onday\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"onDay should be in digits\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{sequences_Step_Id_02}}\",\"stepType\":\"{{sequences_Step_Call}}\",\"stepKind\":\"Manual\",\"onDay\":\"\",\"description\":\"{{sequences_Edit_Description}}\",\"touchType\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Step_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Step_Id_02}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_04_Edit_Step_Empty_Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit step with empty field\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"stepType is required\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{sequences_Step_Id_02}}\",\"stepType\":\"\",\"stepKind\":\"\",\"onDay\":\"\",\"description\":\"\",\"touchType\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Step_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Step_Id_02}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_05_Edit_Step_Wrong_Step_Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit step with wrong step type\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid stepType\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{sequences_Step_Id_02}}\",\"stepType\":\"Description\",\"stepKind\":\"Manual\",\"onDay\":\"4\",\"description\":\"{{sequences_Edit_Description}}\",\"touchType\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Step_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Step_Id_02}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_06_Edit_Step_Miss_Match_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Edit step with missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have permissions to edit this step\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{sequences_Step_Id_02}}\",\"stepType\":\"{{sequences_Step_Call}}\",\"stepKind\":\"Manual\",\"onDay\":\"4\",\"description\":\"{{sequences_Edit_Description}}\",\"touchType\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Step_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Step_Id_02}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_07_Edit_Step_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit step with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid step id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{sequences_Step_Id_02}}\",\"stepType\":\"{{sequences_Step_Call}}\",\"stepKind\":\"Manual\",\"onDay\":\"4\",\"description\":\"{{sequences_Edit_Description}}\",\"touchType\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/steps/12121",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"12121"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_08-Edit_Step_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Edit step with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "12121",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"_id\":\"{{sequences_Step_Id_02}}\",\"stepType\":\"{{sequences_Step_Call}}\",\"stepKind\":\"Manual\",\"onDay\":\"4\",\"description\":\"{{sequences_Edit_Description}}\",\"touchType\":\"\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/steps/{{sequences_Step_Id_02}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"steps",
										"{{sequences_Step_Id_02}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Particular_Contact",
					"item": [
						{
							"name": "Gpc_01_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"var id = pm.globals.get(\"sequences_Id_01\");\r",
											"pm.test(\"Get sequences\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/sequences/contacts/{{contact_Id_01}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"sequences",
										"contacts",
										"{{contact_Id_01}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get_Info",
					"item": [
						{
							"name": "New Request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/sequences/{{sequences_Id_01}}/info",
									"host": [
										"{{url}}"
									],
									"path": [
										"sequences",
										"{{sequences_Id_01}}",
										"info"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Emails",
			"item": [
				{
					"name": "Update_Settings",
					"item": [
						{
							"name": "Sequences_01_Update_Settings_Happy_Path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Update settings\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Sequence updated successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"daysToRun\":[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sun\",\"Sat\"],\"startTime\":\"0800\",\"sendLimit\":10,\"enrollmentLimit\":10,\"timezone\":{\"value\":\"{{sequences_Time_Zone_Value}}\",\"label\":\"{{sequences_Time_Zone_Lable}}\",\"offset\":-11,\"abbrev\":\"SST\",\"altName\":\"Samoa Standard Time\"},\"owner\":\"{{user_Id_01}}\",\"followUpEmail\":false,\"linkToUnsubscribe\":false,\"trackOpens\":true,\"trackLinkClicks\":true,\"stopSending\":\"{{sequences_Setting_Stop_Sending}}\",\"delayBetween\":2} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_02_Update_Settings_Empty_Days",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Update settings with empty data\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid day(s) - []\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"daysToRun\":[],\"startTime\":\"0800\",\"sendLimit\":10,\"enrollmentLimit\":10,\"timezone\":{\"value\":\"{{sequences_Time_Zone_Value}}\",\"label\":\"{{sequences_Time_Zone_Lable}}\",\"offset\":-11,\"abbrev\":\"SST\",\"altName\":\"Samoa Standard Time\"},\"owner\":\"{{user_Id_01}}\",\"followUpEmail\":false,\"linkToUnsubscribe\":false,\"trackOpens\":true,\"trackLinkClicks\":true,\"stopSending\":\"{{sequences_Setting_Stop_Sending}}\",\"delayBetween\":2} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_03_Update_Settings_Empty_Timezone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Update settings with empty timezone\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"timezone should be an object\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"daysToRun\":[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sun\",\"Sat\"],\"startTime\":\"0800\",\"sendLimit\":10,\"enrollmentLimit\":10,\"timezone\":{\"value\":\"\",\"label\":\"\",\"offset\":\"\",\"abbrev\":\"\",\"altName\":\"\"},\"owner\":\"{{user_Id_01}}\",\"followUpEmail\":false,\"linkToUnsubscribe\":false,\"trackOpens\":true,\"trackLinkClicks\":true,\"stopSending\":\"{{sequences_Setting_Stop_Sending}}\",\"delayBetween\":2} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_04_Update_Settings_Invalid_Access_Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Update settings with invalid access token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Access Token is Expired / Invalid Token\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "123123",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"daysToRun\":[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sun\",\"Sat\"],\"startTime\":\"0800\",\"sendLimit\":10,\"enrollmentLimit\":10,\"timezone\":{\"value\":\"{{sequences_Time_Zone_Value}}\",\"label\":\"{{sequences_Time_Zone_Lable}}\",\"offset\":-11,\"abbrev\":\"SST\",\"altName\":\"Samoa Standard Time\"},\"owner\":\"{{user_Id_01}}\",\"followUpEmail\":false,\"linkToUnsubscribe\":false,\"trackOpens\":true,\"trackLinkClicks\":true,\"stopSending\":\"{{sequences_Setting_Stop_Sending}}\",\"delayBetween\":2} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_05_Update_Settings_Invalid_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Update settings with invalid id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid sequence id\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_01}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"daysToRun\":[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sun\",\"Sat\"],\"startTime\":\"0800\",\"sendLimit\":10,\"enrollmentLimit\":10,\"timezone\":{\"value\":\"{{sequences_Time_Zone_Value}}\",\"label\":\"{{sequences_Time_Zone_Lable}}\",\"offset\":-11,\"abbrev\":\"SST\",\"altName\":\"Samoa Standard Time\"},\"owner\":\"{{user_Id_01}}\",\"followUpEmail\":false,\"linkToUnsubscribe\":false,\"trackOpens\":true,\"trackLinkClicks\":true,\"stopSending\":\"{{sequences_Setting_Stop_Sending}}\",\"delayBetween\":2} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/121/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"121",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sequences_06_Update_Settings_Missmatch_Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Update settings for missmatch id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You don't have permissions to update this sequence\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{global_Token_02}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"daysToRun\":[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sun\",\"Sat\"],\"startTime\":\"0800\",\"sendLimit\":10,\"enrollmentLimit\":10,\"timezone\":{\"value\":\"{{sequences_Time_Zone_Value}}\",\"label\":\"{{sequences_Time_Zone_Lable}}\",\"offset\":-11,\"abbrev\":\"SST\",\"altName\":\"Samoa Standard Time\"},\"owner\":\"{{user_Id_01}}\",\"followUpEmail\":false,\"linkToUnsubscribe\":false,\"trackOpens\":true,\"trackLinkClicks\":true,\"stopSending\":\"{{sequences_Setting_Stop_Sending}}\",\"delayBetween\":2} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v2/sequences/{{sequences_Id_01}}/settings",
									"host": [
										"{{url}}"
									],
									"path": [
										"v2",
										"sequences",
										"{{sequences_Id_01}}",
										"settings"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send_Email",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{global_Token_01}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"contactId\":\"{{contact_Id_01}}\",\"emailHTML\":\"<p>kmskmsk</p>\",\"rsubject\":\"linktemp\",\"cc\":\"\",\"toEmail\":[\"{{contact_Email_01}}\"],\"attachments\":[],\"trackViews\":true,\"trackClicks\":true,\"templateId\":null}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/nsendgmail",
							"host": [
								"{{url}}"
							],
							"path": [
								"nsendgmail"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}